# -*- coding: utf-8 -*-

__author__ = 'Wu Dirui'
__version__ = "0.2"

import autoit
import time

INTDEFAULT = -2147483647

class AutoItV3Library:
    """
    本模块只是引用PyAutoIt模块，将它封装成中文版的接口，方便不熟悉英文的用户使用。

    PyAutoIt模块依赖pywin32，因此安装本模块的顺序是：

    1.安装pywin32;

    2.安装PyAutoIt;

    3.安装AutoItV3Library(将AutoItV3Library.py文件拷贝到Python\Lib\site-packages目录里)。
    """
    ROBOT_LIBRARY_SCOPE = "GLOBAL"

    def __init__(self):
        pass

    def auto_it_set_option(self, option, param):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        调整 AutoIt 各种函数/参数的运作方式.

        Auto It Set Option ( "选项" [, 参数] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        option(选项)      要修改的选项.请查看下面的注意部分.

        param(参数)       [可选参数] 需要分配给选项的值. 因设置的选项不同而类型与意思不同. 参考下面的注意部分.
        如果没有参数, 函数会返回目前的选项值. 关键字 Default 可以用于重置选项为默认值.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回返回上一次设置的值.

        失败: 设置错误为非零. 失败可能是因为参数无效(比如选项根本不存在).

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        您可以使用 Opt() 来代替 Auto It Set Option().

        有效的属性包括:

        [选项]                                   [参数]

        CaretCoordMode          设置用于插入符(caret)函数的坐标参照,可以是绝对位置也可以是相对当前激活窗口的坐标位置.
        0 = 相对激活窗口的坐标
        1 = 屏幕的绝对位置(默认)
        2 = 相对激活窗口客户区的坐标

        ExpandEnvStrings         更改字面字符串和 % 符号的解释方式.默认情况下字符串按原文解释,此选项允许您在字符串中使用形如 %environment% 这样的环境变量,例如 "临时文件夹的路径是: %temp%".
        1 = 展开环境变量(类似于 AutoIt v2)
        0 = 不展开展环境变量(默认)
        若未设置此选项则要实现类似功能的方法是:"临时文件夹的路径是: " & EnvGet("temp")

        ExpandVarStrings         更改字面字符串和变量/宏($ 和 @)符号的解释方式.默认情况下字符串按原文解释,此选项允许您在字符串中使用变量和宏,例如 "变量 var1 的值是 $var1$".
        1 = 展开变量(在此模式下如果要表示 $ 或 @ 本身则请用连续两个相应符号表示,例如:"这里有一个美元符号 $$").
        0 = 不展开变量(默认)

        GUICloseOnESC            当用户在一个GUI窗口(处于激活状态时)按下 ESC 键则$GUI_EVENT_CLOSE 消息将被发送.此选项用以切换这一行为.
        1 = 在按下 ESC 时发送消息 $GUI_EVENT_CLOSE(默认).
        0 = 在按下 ESC 时不发送消息 $GUI_EVENT_CLOSE

        GUICoordMode              设置用于 GUICtrlSetPos 函数的坐标参照.
        1 = 绝对坐标(默认)将相对于对话框.
        0 = 相对于上一个控件的起始位置(左上角).
        2 = 相对于当前位置的坐标. A -1 for left or top parameter don't increment the start.
        So next line is -1,offset; next cell is offset,-1; 当前单元为 -1,-1.
        Obviously "offset" cannot be -1 which reserved to indicate the no increment. But if you can use a multiple of the width you choose to skip or go back.

        GUIDataSeparatorChar       定义 GUICtrlSetData 函数里面的分割符.
         默认字符为: '|'.

        GUIOnEventMode             启用/关闭 OnEvent 函数通知.
        0 = (默认)取消.
        1 = 启用.

        GUIResizeMode               更改控件大小调整的模式.
        0 = (默认)不调整
        <1024 = 详情请查看 GUICtrlSetResizing.

        GUIEventOptions             修改特殊的 GUI 函数的返回值类型.
        0 = (默认) 当窗口被最小化,还原,最大化,改变大小,只通知
        1 = 当窗口发生最小化,最大化,改变大小,就禁止这种事件并立即发出通知,等待自定义函数进行处理.

        MouseClickDelay              更改每个鼠标点击命令之间的延迟时间长度.
        以毫秒为单位(默认值 =10).

        MouseClickDownDelay           更改在松开按键之前按住按钮的时间长度.
        以毫秒为单位(默认值 = 10).

        MouseClickDragDelay           更改鼠标开始拖曳到结束拖曳之间的时间长度.
        以毫秒为单位(默认值 = 250).

        MouseCoordMode                 设置用于鼠标函数的坐标参照,可以是绝对位置也可以是相对当前激活窗口的坐标位置.
        0 = 相对激活窗口的坐标
        1 = 屏幕的绝对位置(默认)
        2 = 相对激活窗口客户区的坐标

        MustDeclareVars                如果设置了此选项为1则所有变量在使用之前必须先使用 Dim/Local/Global 声明,这将有助于减少各种因误拼变量而引起的bug的出现.
        1 = 变量必须先声明
        0 = 变量不需预先声明(默认)

        PixelCoordMode                 设置用于象素函数的坐标参照,可以是绝对位置也可以是相对当前激活窗口的坐标位置.
        0 = 相对激活窗口的坐标
        1 = 屏幕的绝对位置(默认)
        2 = 相对激活窗口客户区的坐标

        SendAttachMode SendAttachMode               指定在使用 Send() 函数时 AutoIt 是否捆绑(attach)输入线程.当不捆绑的时候(默认模式 = 0)对 capslock/scrolllock/numlock 等按键状态的检测将是不准确的(指在 NT4 下).不过,在设置捆绑模式 = 1的时候,Send("{... down/up}") 等语法将不被支持,在发送按键的时候也可能会导致系统挂起等问题.至于 ControlSend() 函数则 总是 捆绑线程的,而且不受此模式设置的影响.
        0 = 不捆绑(默认)
        1 = 捆绑

        SendCapslockMode                         指定是否让 AutoIt 在执行 Send 函数之前保存大小写切换键(CapsLock)的状态并在完成操作后恢复到原来的状态.
        0 = 不保存/恢复
        1 = 保存并恢复(默认)

        SendKeyDelay                    更改发送键击命令之间的延迟时间长度.
        以毫秒为单位(默认值=5).设置此值为0时也许会无效,这时请使用1代替.

        SendKeyDownDelay                更改在每次键击期间(松开按键之前)按住按键的时间长度.对于一些需要花费一定时间才能注册按键的应用程序,您可能就要提高这一数值.
        以毫秒为单位(默认值 = 5).

        TCPTimeout                      a name="TCPTimeout">定义TCP 函数连接时最大延迟事件(超过就不再连接).
        单位为毫秒(默认100毫秒)

        TrayAutoPause                   当单击托盘图标时是否暂停.
        0 = 不暂停
        1 = 暂停(默认). 要是已经禁用了暂停菜单,这里失效(参考TrayMenuMode)

        TrayIconDebug                    在托盘图标上显示当前脚本执行到的那一行的相关信息(工具提示)以助调试.
        0 = 不显示调试信息(默认)
        1 = 显示调试信息

        TrayIconHide                     隐藏 AutoIt 托盘图标.注意:托盘图标仍会在程序刚运行时出现大约 750 毫秒.
        0 = 显示托盘图标(默认)
        1 = 隐藏托盘图标

        TrayMenuMode                     扩展脚本在 系统托盘图标/菜单里面的事件. 这个选项可以结合多个选项:
        0 = 默认菜单项目(脚本暂停中.../退出) 扩展到系统托盘图标; 用户添加的项目自动的取消选中; 如果您双击系统托盘图标,那么返回值为默认样式 (default).
        1 = 没有默认菜单
        2 = 用户创建的菜单单击过后不会自动的取消选中状态.
        4 = 双击系统托盘图标不会返回菜单项目ID.
        8 = 关闭项目组的单选检查

        TrayOnEventMode                  应用/关闭 OnEvent 函数通知于系统托盘图标.
        0 = (默认) 关闭
        1 = 应用

        WinDetectHiddenText              指定是否让隐藏的窗口文本也能被窗口匹配函数"看见"(可用于窗口文本参数).
        0 = 不检测隐藏文本(默认)
        1 = 检测隐藏文本

        WinSearchChildren                允许窗口搜索程序在搜索顶层窗口的同时也搜索子窗口.
        0 = 仅搜索顶层窗口(默认)
        1 = 搜索顶层窗口及子窗口.

        WinTextMatchMode                   更改窗口函数在执行搜索操作时的窗口文本匹配模式.
        1 = 完全匹配(较慢)模式(默认)
        2 = 快速模式
        在快速匹配模式下,AutoIt 将只能"看见"对话框文本、按钮文本和某些控件的标题,而在默认模式下则能检测到更多的文本(例如记事本窗口的内容).
        如果在执行较多窗口的搜索操作时遇到性能(指速度)上的问题,那么您就应该考虑使用快速模式.

        WinTitleMatchMode                  更改窗口函数在执行搜索操作时的标题匹配模式.
        1 = 只匹配标题的前面部分(默认)
        2 = 标题的任意子串皆可匹配
        3 = 完全匹配标题
        4 = 高级模式,详情请查看 窗口标题与文本(高级)
        -1 到 -4 = 强制小写匹配.

        WinWaitDelay                        更改每次成功执行窗口相关操作后的延迟时间长度.
        以毫秒为单位(默认值 = 250).

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        相当多!

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        #可直接复制所需语句到脚本中         #最先列出的是各项属性的默认值

        opt("CaretCoordMode", 1)        #1=绝对位置, 0=相对位置, 2=客户区

        opt("ExpandEnvStrings", 0)      #0=不展开, 1=展开

        opt("ExpandVarStrings", 0)      #0=不展开, 1=展开

        opt("GUICloseOnESC", 1)         #1=按下 ESC 将关闭窗口, 0=按下 ESC 将不关闭窗口

        opt("GUICoordMode", 1)          #1=绝对位置, 0=相对位置, 2=单元格

        opt("GUIDataSeparatorChar","|")  #"|"为默认

        opt("GUIOnEventMode", 0)        #0=取消, 1=启用 OnEvent 模式

        opt("GUIResizeMode", 0)         #0=不调整, <1024 特定的调整值

        opt("GUIEventOptions",0)        #0=默认, 1=立即通知, 2=GuiCtrlRead 标签索引

        opt("MouseClickDelay", 10)      #10 毫秒

        opt("MouseClickDownDelay", 10)  #10 毫秒

        opt("MouseClickDragDelay", 250)  #250 毫秒

        opt("MouseCoordMode", 1)        #1=绝对位置, 0=相对位置, 2=客户区

        opt("PixelCoordMode", 1)        #1=绝对位置, 0=相对位置, 2=客户区

        opt("SendAttachMode", 0)        #0=不捆绑, 1=捆绑

        opt("SendCapslockMode", 1)      #1=保存并恢复, 0=不保存

        opt("SendKeyDelay", 5)          #5 毫秒

        opt("SendKeyDownDelay", 1)      #1 毫秒

        opt("TCPTimeout",100)           #100 毫秒

        opt("TrayAutoPause",1)          #0=不暂停, 1=暂停

        opt("TrayIconDebug", 0)         #0=无信息, 1=调试信息

        opt("TrayIconHide", 0)          #0=显示, 1=隐藏托盘图标

        opt("TrayMenuMode",0)           #0=扩展, 1=没有默认菜单, 2=没有自动 check, 4=菜单项目ID 不返回

        opt("TrayOnEventMode",0)        #0=关闭, 1=启用

        opt("WinDetectHiddenText", 0)   #0=不检测, 1=检测

        opt("WinSearchChildren", 1)     #0=不搜索, 1=搜索子窗口

        opt("WinTextMatchMode", 1)      #1=完全匹配, 2=快速匹配

        opt("WinTitleMatchMode", 1)     #1=开头, 2=子串, 3=完全, 4=高级 , -1 to -4=Nocase

        opt("WinWaitDelay", 250)        #250 毫秒

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.auto_it_set_option(option, param)

    def clip_get(self, buf_size=256):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        获取剪切板里的文本.

        Clip Get()

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        buf_size=256.       [可选参数]默认为256.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回剪贴板的文本字符串.

        失败: 如果剪切板为空,把@error设为1
            如果剪切板为非文本,把@error设为2.
            如果无法访问剪切板,把@error设为3或4.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        当多个选择文件/目录都存储在剪贴板,文件名/目录名返回文本用@LF分隔.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Clip Put

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        bak = clip_get()

        print("剪贴板内容:", bak)

        clip_put(bak + "附加文本")

        print("剪贴板内容:", clip_get())

        ----------------------------------------------------------------------------------------------------------------
        """
        return autoit.clip_get(buf_size)

    def clip_put(self, value):
        '''
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        在剪切板中写入文本.

        Clip Put("值")

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        value(值)    要写入剪切板的文本.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1.

        失败: 返回 0.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        剪切板内现有的内容将被覆盖.
        空字符串 "" 将清空剪切板.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Clip Get

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        clip_put("我被拷贝到剪贴板")       #打开记事本,右键粘贴,看看有什么!

        ----------------------------------------------------------------------------------------------------------------
        '''
        return autoit.clip_put(value)

    def control_click(self, title, control, **kwargs):
        '''
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        向指定控件发送鼠标点击命令.

        Control Click ( "标题", 控件ID [, text="文本"[, button=按钮 [, clicks=点击次数 [, x=X坐标 [, y=Y坐标 ]]]]])

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        title (标题)             目标窗口标题,可以是title/class.

        control (控件ID)         要进行交互的控件.参考 控件 的说明.

        text (文本)              [可选参数] 目标窗口文本.

        button (按钮)            [可选参数] 要点击的按钮, 可以是"left"(左键), "right"(右键), "middle"(中键), "main"(主要), "menu"(菜单), "primary"(主键), "secondary"(次键). 默认为left(左键).

        clicks (点击次数)         [可选参数] 要点击鼠标按钮的次数. 默认值为 1.

        X坐标                    [可选参数] 要点击控件的位置(X坐标). 默认为控件中心.

        Y坐标                    [可选参数] 要点击控件的位置(Y坐标). 默认为控件中心.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1.

        失败: 返回 0.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        一些控件在未被激活(激活使用WinActivate()函数)之前将不能使用ControlClick().
        使用两次的点击将会发送一个双击消息到控件 - 这个事件可以用于在资源管理器控件中打开一个文件!

        如果用户在控制面板中交换了鼠标左键和右键, 按钮的行为也将会不同. "Left"(左键) 和 "right"(右键) 总是点击那些按钮,不管按钮是否被交换.
        The "primary" or "main" button will be the main click, whether or not the buttons are swapped. The "secondary" or "menu" buttons will usually bring up the context menu, whether the buttons are swapped or not.

        [按钮]                          [正常]                         [按钮交换后]
        ""                              Left(左键)                        Left(左键)

        "left"(左键)                    Left(左键)                        Left(左键)

        "middle"(中键)                  Middle(中键)                      Middle(中键)

        "right"(右键)                   Right(右键)                       Right(右键)

        "primary"(主键)                 Left(左键)                        Right(右键)

        "main"(主要)                    Left(左键)                        Right(右键)

        "secondary"(次键)               Right(右键)                       Left(左键)

        "menu"(菜单)                    Right(右键)                       Left(左键)

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Control Command, Mouse Click, Win Activate

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("winver.exe")

        HWND=win_wait_active('[REGEXPTITLE:.+Windows;REGEXPCLASS:#\d+]',text='')

        if HWND != 0:

            print(HWND, '系统关于窗口出现咯...')

            control_click(HWND, "Button1")

        else:

            print("ERROR"," 貌似没找到窗口嘛...")

        ----------------------------------------------------------------------------------------------------------------
        '''
        _text = kwargs.get("text", "")
        _button = kwargs.get("button", "left")
        _clicks = kwargs.get("clicks", 1)
        _x = kwargs.get("x", INTDEFAULT)
        _y = kwargs.get("y", INTDEFAULT)

        return autoit.control_click(title, control, text=_text, button=_button, clicks=_clicks, x=_x, y=_y)

    def control_click_by_handle(self, hwnd, h_ctrl, **kwargs):
        '''
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，向指定控件发送鼠标点击命令.

        Control Click By Handle ( "窗口句柄", 控件句柄 [, button=按钮 [, clicks=点击次数 [, x=X坐标 [, y=Y坐标 ]]]]])

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        hwnd (窗口句柄)         目标窗口句柄.

        h_ctrl (控件句柄)      要进行交互的控件句柄.参考 控件 的说明.

        text (文本)         [可选参数] 目标窗口文本.

        button (按钮)       [可选参数] 要点击的按钮, 可以是"left"(左键), "right"(右键), "middle"(中键), "main"(主要), "menu"(菜单), "primary"(主键), "secondary"(次键). 默认为left(左键).

        clicks (点击次数)    [可选参数] 要点击鼠标按钮的次数. 默认值为 1.

        X坐标               [可选参数] 要点击控件的位置(X坐标). 默认为控件中心.

        Y坐标               [可选参数] 要点击控件的位置(Y坐标). 默认为控件中心.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1.

        失败: 返回 0.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Control Click
        '''
        _button = kwargs.get("button", "left")
        _clicks = kwargs.get("clicks", 1)
        _x = kwargs.get("x", INTDEFAULT)
        _y = kwargs.get("y", INTDEFAULT)

        return autoit.control_click_by_handle(hwnd, h_ctrl, button=_button, clicks=_clicks, x=_x, y=_y)

    def control_command(self, title, control, command, buf_size=256, **kwargs):
        '''
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        向指定控件发送命令.

        Control Command ( "窗口标题", 控件ID, "命令" [, buf_size=256 [,text="窗口文本" [, extra="选项"]]] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        title (窗口标题)        目标窗口标题,可以是title/class.

        control (控件ID)       要进行交互的控件.请查看关于 控件 的说明.

        command (命令)         要发送到控件的命令.

        buf_size (缓冲区大小)   [可选参数]默认值为256.

        text (窗口文本)         [可选参数]目标窗口文本.

        extra(选项)            [可选参数]某些命令需要额外的参数.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        下面列出了可用命令.若遇到错误(比如给定了无效的命令/窗口/控件),则 @error=1.

        [命令, 选项]                               [返回值]

        "IsVisible", ""                              若目标控件可见则返回值为1,否则为0.

        "IsEnabled", ""                              若目标控件可用(未被禁用)则返回值为1,否则为0.

        "ShowDropDown", ""                            弹出/下拉 组合框(ComboBox)的列表.

        "HideDropDown", ""                            收回/隐藏 组合框(ComboBox)的列表.

        "AddString", '字符串'                         在 ListBox 或 ComboBox 的编辑框后面附加指定字符串.

        "DelString", 出现次序                         删除在 ListBox 或 ComboBox 的编辑框中指定的字符串(从0开始,0 代表第一个).

        "FindString", '字符串'                        返回在 ListBox 或 ComboBox 的编辑框中与指定字符串匹配项目的出现次序(从0开始,0 代表第一个).

        "SetCurrentSelection", 出现次序                通过指定出现次序(从0开始,0 代表第一个)把 ListBox 或 ComboBox 的当前选择项设为指定的项目.

        "SelectString", '字符串'                      通过指定字符串把 ListBox 或 ComboBox 的当前选择项设为匹配字符串的项目.

        "IsChecked", ""                               若目标按钮(复选框/单选框)被选中则返回值为1,否则为0.

        "Check", ""                                     使目标按钮(复选框/单选框)变为选中状态.

        "UnCheck", ""                                  使目标按钮(复选框/单选框)变为非选中状态.

        "GetCurrentLine", ""                           返回在目标编辑框中插入符(caret,光标)的所在行号.

        "GetCurrentCol", ""                             返回在目标编辑框中插入符(caret,光标)的所在列号.

        "GetCurrentSelection", ""                      返回 ListBox 或 ComboBox 控件当前选中的项目名.

        "GetLineCount", ""                              返回目标编辑框中的总行数.

        "GetLine", 行号                                 返回目标编辑框中指定行的文本内容.

        "GetSelected", ""                                返回目标编辑框中的(用户用鼠标或其它方式)选定的文本.

        "EditPaste", '字符串'                            在目标编辑框中插入符(caret)所在位置后插入指定字符串.

        "CurrentTab", ""                                 返回在 SysTabControl32 控件中当前显示的标签编号(从1开始,1代表左边第一个).

        "TabRight", ""                                   使 SysTabControl32 控件切换到(右边的)下一个标签.

        "TabLeft", ""                                    使 SysTabControl32 控件切换到(左边的)下一个标签.

        "SendCommandID", 命令ID                          模拟 WM_COMMAND 消息. 通常用于 ToolbarWindow32 控件 - 使用Au3Info的工具栏标签得到命令ID.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        有的窗口在非活动状态下会禁止自动化操作(比如:按钮变成灰色). 使用 Win Active() 函数来激活控件所在的窗口过后再使用
        Control Command() 函数来操作控件.

        某些命令能作用于普通的 Combo 和 ListBox 控件,但却不能对 "ComboLBox" 控件正常工作.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Control Click, Control Disable, Control Enable, Control Focus, Control Get Pos, Control Get Text, Control Hide,
        Control Move, Control Set Text, Control Show, Statusbar Get Text, Win Activate, WinMenu Select Item, WinGet Class List,
        Control Get Focus, Control List View, Control Send, Control Tree View

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]",text="")

        control_command("[CLASS:Notepad]", "Edit1", "EditPaste", extra= "放点文本进去")

        ----------------------------------------------------------------------------------------------------------------
        '''
        _text = kwargs.get("text", "")
        _extra = kwargs.get("extra", "")

        return autoit.control_command(title, control, command, buf_size, text=_text, extra=_extra)

    def control_command_by_handle(self, hwnd, h_ctrl, command, buf_size = 256, ** kwargs):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，向指定控件发送命令.

        Control Command By Handle ( "窗口句柄", 控件句柄, "命令" [, buf_size=256 [, extra="选项"]] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        hwnd (窗口句柄)        目标窗口句柄.

        h_ctrl (控件句柄)       要进行交互的控件句柄.请查看关于 控件 的说明.

        command (命令)         要发送到控件的命令.

        buf_size (缓冲区大小)   [可选参数]默认值为256.

        extra(选项)            [可选参数]某些命令需要额外的参数.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Control Command
        """
        _extra = kwargs.get("extra", "")

        return autoit.control_command_by_handle(hwnd, h_ctrl, command, buf_size, extra=_extra)

    def control_list_view(self, title, control, command, **kwargs):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        向指定的 ListView32 控件发送命令.

        Control List View ( "窗口标题", 控件ID, "命令" [, text="窗口文本" [, extra1=选项1 [, extra2=选项2 [, buf_size=256]]]] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)      目标窗口标题,可以是title/class.

        control(控件ID)      目标控件.请查看关于控件的说明.

        command(命令)       要发送到控件的命令(请看下表).

        text(窗口文本)        [可选参数] 目标窗口文本.

        extra1(选项1)          [可选参数] 某些命令需要的额外参数.

        extra2(选项2)          [可选参数] 某些命令需要的额外参数.

        buf_size (缓冲区大小)     [可选参数] 默认值为256

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        下面列出了可用的命令.若遇到错误(比如给定了无效的命令或者窗口/控件不存在),则 @error=1.

        [命令, 选项1, 选项2]                                              [操作]

        "DeSelect", 从[, 到]                                           取消选定从"从"开始直到"到"的一个或多个项目.

        "FindItem", "搜索字符串" [, 子项目]                              返回与给定字符串匹配的项目的位置.若未找到指定字符串则返回值为 -1.

        "GetItemCount"                                                 返回列表中项目的数量.

        "GetSelected" [, 选项]                                         返回当前选中项目的位置.若 选项=0(默认)则只返回选中的第一个项目;若 选项=1 则返回由竖线"|"作为分隔符的所有选中项目,例如:"0|3|4|10".若没有选中任何项目则返回一个空字符串"".

        "GetSelectedCount"                                             返回选中项目的数量.

        "GetSubItemCount"                                              返回子项目的数量.

        "GetText", 项目, 子项目                                         返回指定项目/子项目的文本.

        "IsSelected", 项目                                             若指定项目被选中则返回值为1,否则返回值为0.

        "Select", 从[, 到]                                             选中一个或多个项目(请参考第一个命令).

        "SelectAll"                                                    选中所有项目.

        "SelectClear"                                                  取消所有项目的选中状态.

        "SelectInvert"                                                 切换当前的选中状态.

        "ViewChange", "视图"                                           切换当前的视图.可用的视图包括"list"(列表),"details"(详细信息),"smallicons"(小图标),"largeicons"(大图标).

        所有项目/子项目是基于 0 开始的. 意思是,一个列表中第一个项目/子项目是0,第二个是 1,等等.

        对于处于"详细信息"视图的 ListView32 控件,可把"项目"看作它的"行",而把"子项目"看作它的"列".

        ----------------------------------------------------------------------------------------------------------------

       [注意/说明]

        当使用32位的Autoit去读取64位进程的数据时,可能会失败. 同理,使用64位的Autoit去读取32位应用程序的数据也可能失败.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Control Command

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        import time

        print('请注意看桌面图标')

        #返回列表项目总数

        GetItemCount=control_list_view('Program Manager','SysListView321','GetItemCount')

        print('返回列表中项目的数量', GetItemCount)

        #搜索指定字符串

        FindItem=control_list_view('Program Manager', 'SysListView321','FindItem', extra1='Internet Explorer')

        print('搜索字符串','Internet Explorer  位置:' + FindItem)

        #切换当前的视图

        control_list_view('Program Manager', 'SysListView321','ViewChange', extra1='details')

        time.sleep(1)

        control_list_view('Program Manager', 'SysListView321','ViewChange', extra1='smallicons')

        #选择其中几个项目

        Select=control_list_view('Program Manager', 'SysListView321','Select',extra1=1,extra2=3)

        win_activate('Program Manager') #激活窗口来预览效果

        time.sleep(1)

        #返回选中项目的位置

        GetSelected=control_list_view('Program Manager', 'SysListView321','GetSelected',extra1=1)

        if GetSelected != Null:

            print('当前选中项目的位置', GetSelected)

        #返回子项目的数量

        GetSubItemCount=control_list_view('Program Manager', 'SysListView321','GetSubItemCount')

        print('返回子项目的数量', GetSubItemCount)

        #返回指定项目/子项目的文本

        GetText=control_list_view('Program Manager', 'SysListView321','GetText',extra1=0)

        print('返回指定项目/子项目的文本', GetText)

        win_activate('Program Manager') #激活窗口来预览效果

        control_list_view('Program Manager', 'SysListView321','SelectAll')

        time.sleep(1)

        control_list_view('Program Manager', 'SysListView321','DeSelect',extra1=1, extra2=3)

        time.sleep(1)

        control_list_view('Program Manager', 'SysListView321','SelectInvert')

        time.sleep(1)

        control_list_view('Program Manager', 'SysListView321','SelectClear')

        time.sleep(1)

        print('没了!睡觉吧!')

        ----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")
        _buf_size = kwargs.get("buf_size", 256)
        _extra1 = kwargs.get("extras1", "")
        _extra2 = kwargs.get("extras2", "")

        return autoit.control_list_view(title, control, command, text=_text, buf_size=_buf_size, extras1=_extra1, extras2=_extra2)

    def control_list_view_by_handle(self, hwnd, h_ctrl, command, **kwargs):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，向指定的 ListView32 控件发送命令.

        Control List View By Handle ( "窗口句柄", 控件句柄, "命令" [, extra1=选项1 [, extra2=选项2 [, buf_size=256]]] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        hwnd(窗口句柄)      目标窗口句柄.

        h_ctrl(控件句柄)      目标控件句柄.请查看关于控件的说明.

        command(命令)       要发送到控件的命令(请看下表).

        extra1(选项1)          [可选参数] 某些命令需要的额外参数.

        extra2(选项2)          [可选参数] 某些命令需要的额外参数.

        buf_size (缓冲区大小)     [可选参数] 默认值为256

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Control List View
        """
        _extra1 = kwargs.get("extra1", "")
        _extra2 = kwargs.get("extra2", "")
        _buf_size = kwargs.get("buf_size", 256)

        return autoit.control_list_view_by_handle(hwnd, h_ctrl, command, extra1=_extra1, extra2=_extra2, buf_size=_buf_size)

    def control_disable(self, title, control, **kwargs):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        禁用或使某控件变成灰色不可用状态.

        Control Disable ( "窗口标题", 控件ID, [, text="窗口文本"])

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)      目标窗口标题,可以是title/class.

        control(控件ID)     要进行交互的控件.请查看关于 控件 的说明.

        text(窗口文本)      [可选参数]目标窗口文本.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为1.

        失败: 返回值为0.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        None.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Control Enable, Control Hide, Control Command

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("winver.exe")

        HWND=win_wait_active('[REGEXPTITLE:.+Windows;REGEXPCLASS:#\d+]')

        if HWND != 0:

            print(HWND,'系统关于窗口出现咯...我们禁用掉确定按钮试试')

            control_disable(HWND, "Button1")

        else:

            print("ERROR","貌似没找到窗口嘛...")

        ----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.control_disable(title, control, text=_text)

    def control_disable_by_handle(self, hwnd, h_ctrl):
        """
        ----------------------------------------------------------------------------------------------------------------

        根据句柄，禁用或使某控件变成灰色不可用状态.

        Control Disable By Handle ( "窗口句柄", 控件句柄)

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        hwnd(窗口句柄)      目标窗口句柄.

        h_ctrl(控件句柄)     要进行交互的控件句柄.请查看关于 控件 的说明.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为1.

        失败: 返回值为0.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Control Disable
        """
        return autoit.control_disable_by_handle(hwnd, h_ctrl)

    def control_enable(self, title, control, **kwargs):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        使灰色按钮/控件变为"可用"状态.

        Control Enable ( "窗口标题", 控件ID [, text="窗口文本"])

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)          目标窗口标题,可以是title/class.

        control(控件ID)          需要交互的控件. 参考 控件的说明.

        text(窗口文本)           [可选参数]目标窗口文本.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1.

        失败: 返回 0.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        None.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Control Disable, Control Show, Control Command

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("winver.exe")

        HWND=win_wait_active('[REGEXPTITLE:.+Windows;REGEXPCLASS:#\d+]')

        if HWND != 0:

            #先禁用

            control_disable(HWND, "Button1")

            print(HWND,'系统关于窗口出现咯...我们启用确定按钮试试')

            control_enable(HWND, "Button1")

        else:

            print("ERROR","貌似没找到窗口嘛...")

        ----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.control_enable(title, control, text=_text)

    def control_enable_by_handle(self, hwnd, h_ctrl):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，使灰色按钮/控件变为"可用"状态.

        Control Enable By Handle ( "窗口句柄", 控件句柄)

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        hwnd(窗口句柄)          目标窗口句柄.

        h_ctrl(控件句柄)          需要交互的控件句柄. 参考 控件的说明.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1.

        失败: 返回 0.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Control Enable
        """
        return autoit.control_enable_by_handle(hwnd, h_ctrl)

    def control_focus(self, title, control, **kwargs):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        设置输入焦点到指定窗口的某个控件上.

        Control Focus ( "窗口标题", 控件ID [, text="窗口文本"])

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)        目标窗口标题,可以是title/class.

        control(控件ID)        需要进行交互的控件.请查看关于控件的说明.

        text(窗口文本)         [可选参数]目标窗口文本.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功:  返回值为1.

        失败: 返回值为0.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        None.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Control Get Focus, Control Command, Control Send

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        control_focus("[CLASS:Notepad]", "Edit1")

        ----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.control_focus(title, control, text=_text)

    def control_focus_by_handle(self, hwnd, h_ctrl):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，设置输入焦点到指定窗口的某个控件上.

        Control Focus By Handle ( "窗口句柄", 控件句柄 )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        hwnd(窗口句柄)        目标窗口句柄.

        h_ctrl(控件句柄)        需要进行交互的控件句柄.请查看关于控件的说明.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功:  返回值为1.

        失败: 返回值为0.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Control Focus
        """
        return autoit.control_focus_by_handle(hwnd, h_ctrl)

    def control_get_focus(self, title, **kwargs):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        返回指定窗口上键盘焦点所在的控件的类别名.

        Control Get Focus ( "窗口标题" [, text="窗口文本" [, buf_size=256]] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)       目标窗口标题,可以是title/class.

        text(窗口文本)       [可选参数] 目标窗口文本.

        buf_size (缓冲区大小)     [可选参数] 默认值为256.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回在指定窗口上拥有键盘焦点的控件的ClassNameNN(类别名).

        失败: 返回"" (空字符串),并把 @error 设为 1,说明未找到目标窗口.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        None.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Control Focus, Control Command

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        a = control_get_focus("[CLASS:Notepad]")

        ----------------------------------------------------------------------------------------------------------------
        """
        _buf_size = kwargs.get("buf_size", 256)
        _text = kwargs.get("text", "")

        return autoit.control_get_focus(title, buf_size=_buf_size, text=_text)

    def control_get_focus_by_handle(self, hwnd, buf_size=256):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，返回指定窗口上键盘焦点所在的控件的类别名.

        Control Get Focus By Handle( "窗口句柄" [, buf_size=256] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        hwnd(窗口句柄)         目标窗口句柄.

        buf_size (缓冲区大小)     [可选参数] 默认值为256.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回在指定窗口上拥有键盘焦点的控件的ClassNameNN(类别名).

        失败: 返回"" (空字符串),并把 @error 设为 1,说明未找到目标窗口.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Control Get Focus
        """
        return autoit.control_get_focus_by_handle(hwnd, buf_size)

    def control_get_handle(self, hwnd, control):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        获取指定控件的内部句柄.

        Control Get Handle ( "窗口句柄", 控件ID)

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        hwnd(窗口句柄)            目标窗口句柄.

        control(控件ID)           目标控件.请查看关于控件的说明.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回获得的句柄(HWND).

        失败: 返回0,并把 @error 设为 1,说明未发现匹配窗口.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        具体示例请参考Control Get Handle As Text

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Control Get Handle As Text

        ----------------------------------------------------------------------------------------------------------------
        """
        return autoit.control_get_handle(hwnd, control)

    def control_get_handle_as_text(self, title, control, **kwargs):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        获取指定控件的内部句柄，返回的句柄值是字符串.

        Control Get Handle As Text( "窗口标题", 控件ID [, text="窗口文本"])

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)            目标窗口标题,可以是title/class.

        control(控件ID)           目标控件.请查看关于控件的说明.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回获得的句柄(HWND)的字符串.

        失败: 返回一个""(空字符串),并把 @error 设为 1,说明未发现匹配窗口.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        本函数的返回值是 HWND/Handle 类型的字符串.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        没有.

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        handle = control_get_handle_as_text("[CLASS:Notepad]", "Edit1")

        print("这货是不是一个句柄?","返回值:" + handle)

        ----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")
        _buf_size = kwargs.get("buf_size", 32)

        return autoit.control_get_handle_as_text(title, control, text=_text, buf_size=_buf_size)

    def control_get_pos(self, title, control, text=""):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        获取指定控件相对其窗口的坐标位置和大小等信息.

        Control Get Pos ( "窗口标题", 控件ID [, text="窗口文本"])

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)      目标窗口标题,可以是title/class.

        control(控件ID)      要进行交互的控件. 请查看关于控件的说明.

        text(窗口文本)       [可选参数]目标窗口文本.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回一个储存着指定控件相对其窗口的位置及大小等信息的数组:

         $array[0] = X 坐标

         $array[1] = Y 坐标

         $array[2] = 宽度

         $array[3] = 高度

        失败: 把 @error 设为 1.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        窗口标题/文本会涉及到父窗口,请小心的使用("","")定义参数.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Control Command, Control Move

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        pos = control_get_pos("[CLASS:Notepad]", "Edit1")

        print("窗口状态:", "坐标: " + pos[0] + "," + pos[1] + " 大小: " + pos[2] + "," + pos[3] )

        ----------------------------------------------------------------------------------------------------------------
        """
        return autoit.control_get_pos(title, control, text)

    def control_get_pos_by_handle(self, hwnd, h_ctrl):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，获取指定控件相对其窗口的坐标位置和大小等信息.

        Control Get Pos By Handle ( "窗口句柄", 控件句柄)

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        hwnd(窗口句柄)       目标窗口句柄.

        h_ctrl(控件句柄)      要进行交互的控件句柄. 请查看关于控件的说明.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回一个储存着指定控件相对其窗口的位置及大小等信息的数组:

         $array[0] = X 坐标

         $array[1] = Y 坐标

         $array[2] = 宽度

         $array[3] = 高度

        失败: 把 @error 设为 1.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Control Get Pos

        """
        return autoit.control_get_pos_by_handle(hwnd, h_ctrl)

    def control_get_text(self, title, control, **kwargs):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        获取指定控件上的文本.

        Control Get Text ( "窗口标题", 控件ID [, text="窗口文本" [, buf_size=256]])

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)       要访问的窗口标题,可以是title/class.

        control(控件ID)       要操作的控件. 请查看关于控件的说明.

        text(窗口文本)        [可选参数]要访问的窗口的文本.

        buf_size (缓冲区大小)     [可选参数] 默认值为256.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回一个控件上的文本.

        失败: 设置 @error 设为 1,并返回一个空字符串 "".

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        None.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Get Text, Statusbar Get Text, Control Set Text, Control Command

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        control_command("[CLASS:Notepad]", "Edit1", "EditPaste", extra="放点文本进去")

        var = control_get_text("[CLASS:Notepad]", "Edit1")

        print("返回值", var)

        ----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")
        _buf_size = kwargs.get("buf_size", 256)

        return autoit.control_get_text(title, control, text=_text, buf_size=_buf_size)

    def control_get_text_by_handle(self, hwnd, h_ctrl, **kwargs):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，获取指定控件上的文本.

        Control Get Text By Handle ( "窗口句柄", 控件句柄 [, buf_size=256])

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        hwnd(窗口句柄)        要访问的窗口句柄.

        h_ctrl(控件句柄)       要操作的控件句柄. 请查看关于控件的说明.

        buf_size (缓冲区大小)     [可选参数] 默认值为256.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回一个控件上的文本.

        失败: 设置 @error 设为 1,并返回一个空字符串 "".

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Control Get Text
        """
        _buf_size = kwargs.get("buf_size", 256)

        return autoit.control_get_text_by_handle(hwnd, h_ctrl, buf_size=_buf_size)

    def control_hide(self, title, control, **kwargs):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        隐藏指定控件.

        Control Hide ( "窗口标题", 控件ID [, text="窗口文本"])

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)          目标窗口标题,可以是title/class.

        control(控件ID)          目标控件.请查看关于控件的说明.

        text(窗口文本)           [可选参数]目标窗口文本.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为1.

        失败: 返回值为0,说明未找到目标窗口/控件.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        None.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Control Show, Control Command, Control Disable, Win Set State

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("winver.exe")

        HWND=win_wait_active('[REGEXPTITLE:.+Windows;REGEXPCLASS:#\d+]')

        if HWND != 0:

            print(HWND, '系统关于窗口出现咯...我们隐藏掉确定按钮试试')

            control_hide(HWND, "Button1")

        else:

            print("ERROR", "貌似没找到窗口嘛...")

        ----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.control_hide(title, control, text=_text)

    def control_hide_by_handle(self, hwnd, h_ctrl):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，隐藏指定控件.

        Control Hide By Handle ( "窗口句柄", 控件句柄)

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        hwnd(窗口句柄)          目标窗口句柄.

        h_ctrl(控件句柄)          目标控件句柄.请查看关于控件的说明.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为1.

        失败: 返回值为0,说明未找到目标窗口/控件.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Control Hide
        """
        return autoit.control_hide_by_handle(hwnd, h_ctrl)

    def control_move(self, title, control, x, y, width=-1, height=-1, **kwargs):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        在窗口内移动控件.

        Control Move ( "窗口标题", 控件ID, X坐标, Y坐标 [, 宽度 [, 高度 [, text="窗口文本"]]] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)           目标窗口标题,可以是title/class.

        control(控件ID)           目标控件.请查看关于 控件 的说明.

        x(X坐标)                  要移动到的新 X 坐标.

        y(Y坐标)                  要移动到的新 Y 坐标.

        width(宽度)               [可选参数] 窗口的新宽度.

        height(高度)              [可选参数] 窗口的新高度.

        text(窗口文本)            [可选参数] 目标窗口文本.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为1.

        失败: 返回值为0,说明未找到目标窗口/控件.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        如果 X 坐标 和 与 Y 坐标等于 Default 关键字 ,将不会移动控件, 只是调整控件大小.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Control Command, Control Get Pos

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("winver.exe")

        HWND=win_wait_active('[REGEXPTITLE:.+Windows;REGEXPCLASS:#\d+]')

        if HWND != 0:

            print(HWND, '系统关于窗口出现咯...我们移动确定按钮试试')

            control_move(HWND, "Button1",20,40)

        else:

            print("ERROR","貌似没找到窗口嘛...")

        ----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.control_move(title, control, x, y, width, height, text=_text)

    def control_move_by_handle(self, hwnd, h_ctrl, x, y, width=-1, height=-1):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，在窗口内移动控件.

        Control Move By Handle ( "窗口句柄", 控件句柄, X坐标, Y坐标 [, 宽度 [, 高度]] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        hwnd(窗口句柄)           目标窗口句柄.

        h_ctrl(控件句柄)           目标控件句柄.请查看关于 控件 的说明.

        x(X坐标)                  要移动到的新 X 坐标.

        y(Y坐标)                  要移动到的新 Y 坐标.

        width(宽度)               [可选参数] 窗口的新宽度.

        height(高度)              [可选参数] 窗口的新高度.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为1.

        失败: 返回值为0,说明未找到目标窗口/控件.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Control Move
        """
        return autoit.control_move_by_handle(hwnd, h_ctrl, x, y, width, height)

    def control_send(self, title, control, send_text, mode=0, **kwargs):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        向指定的控件发送字符串.

        Control Send ( "窗口标题", 控件ID, "字符串" [, 标志 [, text="窗口文本"]] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)            目标窗口标题,可以是title/class.

        control(控件ID)            目标控件.请查看关于控件的说明.

        send_text(字符串)          要发送到控件的字符串.

        mode(标志)                 [可选参数] 更改程序处理"按键"的方式:

          标志 = 0 (默认),按键序列中含有的特殊字符比如 + 和 {LEFT} 将被视为 SHIFT 和 左箭头 键.

          标志 = 1, 按键将按原样发送.

        text(窗口文本)           [可选参数] 目标窗口文本.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为1.

        失败: 返回值为0,说明未找到目标窗口/控件.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        Control Send 工作和 Send 类似,但它可以直接发送按键到控件和窗口,而不只是活动窗口.

        Control Send 对于命令提示行操作不稳定,因为它和正常窗口工作方式不一样(似乎检查物理按键状态超过了接受按键消息).
        正常窗口下 Control Send 可能比 Send 更可靠 - 并且它能发送shift, ctrl, alt 等等.

        话说键盘 CAPS LOCK 开启情况下,Send 将发送不同的字符,也不能模拟Shift键. 比如使用捷克键盘布局. 一个好的解决办法是使用 Control Set Text.

        控件可能需要先使用 Control Focus 命令得到焦点, 特别是当引用的控件ID由脚本本身创建.

        Opt("SendKeyDelay",...) 改变发送按键之间的间歇长度.

        Opt("SendKeyDownDelay",...) 改变按键在释放之前被按压的时间长度.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Control Command, Send, Control Set Text, Control Focus

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]
        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        control_send("[CLASS:Notepad]", "Edit1", "将会发送一些文本到记事本窗口去.")

        ----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.control_send(title, control, send_text, mode, text=_text)

    def control_send_by_handle(self, hwnd, h_ctrl, send_text, mode=0):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，向指定的控件发送字符串.

        Control Send By Handle ( "窗口句柄", 控件句柄, "字符串" [, 标志] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        hwnd(窗口句柄)            目标窗口句柄.

        h_ctrl(控件句柄)            目标控件句柄.请查看关于控件的说明.

        send_text(字符串)          要发送到控件的字符串.

        mode(标志)                 [可选参数] 更改程序处理"按键"的方式:

          标志 = 0 (默认),按键序列中含有的特殊字符比如 + 和 {LEFT} 将被视为 SHIFT 和 左箭头 键.

          标志 = 1, 按键将按原样发送.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为1.

        失败: 返回值为0,说明未找到目标窗口/控件.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Control Send
        """
        return autoit.control_send_by_handle(hwnd, h_ctrl, send_text, mode)

    def control_set_text(self, title, control, control_text, **kwargs):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        修改指定控件的文本.

        Control Set Text ( "窗口标题", 控件ID, "新文本" [, text="窗口文本"] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)             目标窗口标题,可以是title/class.

        control(控件ID)             目标控件.请查看关于控件的说明.

        control_text(新文本)        要设置到控件的新文本.

        text(窗口文本)          [可选参数] 目标窗口文本.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为1.

        失败: 返回值为0,说明未找到目标窗口/控件.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        None.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Control Get Text, Control Command, Control Send

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        win_wait("[CLASS:Notepad]")

        control_set_text("[CLASS:Notepad]", "Edit1", "这里是设置的文本" )

        ----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.control_set_text(title, control, control_text, text=_text)

    def control_set_text_by_handle(self, hwnd, h_ctrl, control_text):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，修改指定控件的文本.

        Control Set Text By Handle ( "窗口句柄", 控件句柄, "新文本")

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        hwnd(窗口句柄)             目标窗口句柄.

        h_ctrl(控件句柄)             目标控件句柄.请查看关于控件的说明.

        control_text(新文本)        要设置到控件的新文本.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为1.

        失败: 返回值为0,说明未找到目标窗口/控件.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Control Set Text
        """
        return autoit.control_set_text_by_handle(hwnd, h_ctrl, control_text)

    def control_show(self, title, control, **kwargs):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        显示已经隐藏的控件.

        Control Show ( "窗口标题", 控件ID [, text="窗口文本"])

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)           目标窗口标题,可以是title/class.

        control(控件ID)           目标控件.请查看关于 控件 的说明.

        text窗口文本)             目标窗口文本.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为1.

        失败: 返回值为0 说明未找到目标窗口/控件.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        None.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Control Hide, Control Enable, Control Command

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("winver.exe")

        HWND=win_wait_active('[REGEXPTITLE:.+Windows;REGEXPCLASS:#\d+]')

        if HWND != 0:

            #先隐藏

            control_hide(HWND, "Button1")

            print(HWND,'系统关于窗口出现咯...我们显示确定按钮试试')

            control_show(HWND, "Button1")

        else:

            print("ERROR","貌似没找到窗口嘛...")

        ----------------------------------------------------------------------------------------------------------------
        """

        _text = kwargs.get("text", "")

        return autoit.control_show(title, control, text=_text)

    def control_show_by_handle(self, hwnd, h_ctrl):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，显示已经隐藏的控件.

        Control Show By Handle ( "窗口句柄", 控件句柄)

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        hwnd(窗口句柄)           目标窗口句柄.

        h_ctrl(控件句柄)           目标控件句柄.请查看关于 控件 的说明.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为1.

        失败: 返回值为0 说明未找到目标窗口/控件.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Control Show
        """
        return autoit.control_show_by_handle(hwnd, h_ctrl)

    def control_tree_view(self, title, control, command, **kwargs):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        发送一个命令到 TreeView32 控件.

        Control Tree View ( "窗口标题", 控件ID, "命令" [, text="窗口文本" [, extra1=选项1 [, extra2=选项2 [, buf_size=256]]]] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)              目标窗口标题,可以是title/class.

        control(控件ID)              目标控件ID.请查看关于 控件 的说明.

        command(命令)                要发送到控件的命令 (见下方).

        text(参考文本)               [可选参数] 目标窗口文本.

        extra1(选项1)                [可选参数] 一些命令的附加请求参数.

        extra2(选项2)                [可选参数] 一些命令的附加请求参数.

        buf_size (缓冲区大小)        [可选参数] 默认值为256.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        下方列表显示了可使用的命令. 如果使用命令产生的错误(比如无效的命令或者窗口/控件不存在),@error 将会被设置为 1.


        [命令, 选项1, 选项2]                                      [操作]

        "Check", "项目"                                         选中一个项目 (如果项目支持选中,这里指项目带有选择框).

        "Collapse", "项目"                                      折叠一个项目节点,使它隐藏它的子项目.

        "Exists", "项目"                                        如果项目存在返回 1,否则返回 0.

        "Expand", "项目"                                        展开一个项目节点,使它显示它的子项目.

        "GetItemCount", "项目"                                  返回所选项目的子项目数量.

        "GetSelected" [, 使用索引]                              返回当前所选项目的文本参考信息(如果使用索引设置为1将会返回所选项目索引位置).

        "GetText", "项目"                                       返回项目文本.

        "IsChecked"                                             返回项目选中状态. 1:被选中, 0:未被选中, -1:没要选择框.

        "Select", "项目"                                        选择一个项目.

        "Uncheck", "项目"                                       取消项目选中状态 (如果项目支持选中,这里指项目带有选择框).

        "项目" 参数是一个基于字符串表达的 treeview 项目联合文本参考信息索引. 索引是基于0开始计算的. 如下例:

        标题1

        ----> 子项目1

        ----> 子项目2

        ----> 子项目3

        ----> ----> 标题1子项目1的子项目1

        标题2

        标题3

        英文原例子,便于理解:

        Heading1

        ----> H1SubItem1

        ----> H1SubItem2

        ----> H1SubItem3

        ----> ----> H1S1SubItem1

        Heading2

        Heading3

        每个 "等级" 使用管道符|分开. 一个项目前带有一个#. 例如:

        项目 项目参考

        标题2 "标题2" 或者 "#1"

        标题1子项目2 "标题1|子项目2" 或者 "#0|#1"

        标题1子项目1的子项目1 "标题1|标题1子项目3|标题1子项目1的子项目1" 或者 "#0|#2|#0"

        汉化说明 上面很乱啊,自己研究下.不明白参考下方的原英文帮助.

        项目 项目参考

        Heading2 "Heading2" or "#1"

        H1SubItem2 "Heading1|H1SubItem2" or "#0|#1"

        H1S1SubItem1 "Heading1|H1SubItem3|H1S1SubItem1" or "#0|#2|#0"

        参考可以是一个混合表达式,就像 "标题1|#1".

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        在64位Windows系统上运行32位的AutoIt时,部分参考可能无效,请使用64位AutoIt版本.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Control Command

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        #作者:         Zedna

        #include <GUIConstantsEx.au3>

        #include <TreeviewConstants.au3>

        #include <WindowsConstants.au3>

        Local $gui = GUICreate("ControlTreeview 测试", 212, 212)

        Local $treeview = GUICtrlCreateTreeView(6, 6, 200, 160, BitOR($TVS_HASBUTTONS, $TVS_HASLINES, $TVS_LINESATROOT, $TVS_CHECKBOXES), $WS_EX_CLIENTEDGE)

        Local $h_tree = ControlGetHandle($gui, "", $treeview)

        Local $root = GUICtrlCreateTreeViewItem("根", $treeview)

        GUICtrlCreateTreeViewItem("项目 1", $root)

        GUICtrlCreateTreeViewItem("项目 2", $root)

        GUICtrlCreateTreeViewItem("项目 3", $root)

        Local $item4 = GUICtrlCreateTreeViewItem("项目 4", $root)

        GUICtrlCreateTreeViewItem("项目 41", $item4)

        GUICtrlCreateTreeViewItem("项目 42", $item4)

        GUICtrlCreateTreeViewItem("项目 5", $root)

        GUISetState(@SW_SHOW)

        ; 一些例子

        ControlTreeView ($gui, "", $h_tree, "Expand", "根")

        ControlTreeView ($gui, "", $h_tree, "Exists", "根|项目 4")

        ControlTreeView ($gui, "", $h_tree, "Check", "根|项目 4")

        ControlTreeView ($gui, "", $h_tree, "Select", "根|项目 4")

        ControlTreeView ($gui, "", $h_tree, "Expand", "根|项目 4")

        While 1

            Local $msg = GUIGetMsg()

            Select

                Case $msg = $GUI_EVENT_CLOSE

                    ExitLoop

            EndSelect

        WEnd

        ----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")
        _buf_size = kwargs.get("buf_size", 256)
        _extra1 = kwargs.get("extras1", "")
        _extra2 = kwargs.get("extras2", "")

        return autoit.control_tree_view(title, control, command, text=_text, buf_size=_buf_size, extras1=_extra1, extras2=_extra2)

    def control_tree_view_by_handle(self, hwnd, h_ctrl, command, **kwargs):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，发送一个命令到 TreeView32 控件.

        Control Tree View By Handle ( "窗口句柄", 控件句柄, "命令" [, extra1=选项1 [, extra2=选项2 [, buf_size=256]]] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        hwnd(窗口句柄)              目标窗口句柄.

        h_ctrl(控件句柄)              目标控件句柄.请查看关于 控件 的说明.

        command(命令)                要发送到控件的命令 (见下方).

        extra1(选项1)                [可选参数] 一些命令的附加请求参数.

        extra2(选项2)                [可选参数] 一些命令的附加请求参数.

        buf_size (缓冲区大小)        [可选参数] 默认值为256.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        参考Control Tree View
        """
        _buf_size = kwargs.get("buf_size", 256)
        _extra1 = kwargs.get("extras1", "")
        _extra2 = kwargs.get("extras2", "")

        return autoit.control_tree_view_by_handle(hwnd, h_ctrl, command, buf_size=_buf_size, extras1=_extra1, extras2=_extra2)

    def drive_map_add(self, device, share, flag=0, user="", pwd="", buf_size=256):
        '''
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        映射网络驱动器.

        Drive Map Add ( "设备名", "远程共享路径" [, 标志 [, "用户名" [, "密码" [, buf_size=256]]]] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        device(设备名)          将网络共享文件夹映射到指定设备, 例如 "O:" 或 "LPT1:". 若传递一个空字符串到此参数则会创建一个连接,
        但不会映射指定驱动器. 如果您指定 "*" 一个未使用的驱动器号将会自动被选择.

        share(远程共享路径)    要连接到的远程共享文件夹 "//server/share".

        flag(标志)            [可选参数] 可以是以下数值的组合:

            0 = 默认

            1 = 保持映射连接

            8 = 如有需要则显示身份验证对话框

        user(用户名)          [可选参数] 连接到网络驱动器时使用的用户名, 例如"username" 或 "domain/username".

        pwd(密码)             [可选参数] 连接到网络驱动器时使用的密码.

        buf_size (缓冲区大小)        [可选参数] 默认值为256.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为1. (See Remarks)

        失败: 返回值为0, 并把 @error 设为相应数值. (See Remarks)

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        本函数在创建映射失败时(返回值为0)将把 @error 设为以下数值之一:

         1 = 未定义 / 其它错误. @extended 设置为 Windows API 返回的值

         2 = 访问远程共享被拒绝

         3 = 设备名已被指派

         4 = 无效的设备名

         5 = 无效的远程共享

         6 = 无效的密码

        注释: 当使用 "*" 作为设备名参数时本函数的返回值将不再是1或0而是选中的驱动器盘符,例如 "U:";如果此时(使用"*")遇到错误则返回一个空字符串"".

        如果定义 用户名/密码 到远程计算机,请确认远程计算机是可信任的.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Drive Map Del, Drive Map Get

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        #使用当前用户映射 X: 驱动器到 //myserver/stuff

        drive_map_add("X:", "//myserver/stuff")

        #映射 X 磁盘到 //myserver2/stuff2 ,使用用户名:"jon" ,域:"domainx" 密码:"tickle"

        drive_map_add("X:", "//myserver2/stuff2", 0, "domainx/jon", "tickle")

        ----------------------------------------------------------------------------------------------------------------
        '''
        return autoit.drive_map_add(device, share, flag, user, pwd, buf_size)

    def drive_map_del(self, device):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        断开网络驱动器.

        Drive Map Del ( "驱动器" )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        device(驱动器)           要中断连接的设备名, 例如 "O:" 或 "LPT1:".

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为 1.

        失败: 返回值为 0, 若没有成功断开连接.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        若要断开的连接没有被指派驱动器盘符, 请使用连接名(远程共享路径)来中断映射, 例如 \\server\share

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Drive Map Add, Drive Map Get

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        # 使用当前用户映射 X: 驱动器到 \\myserver\stuff

        drive_map_add("X:", "\\myserver\stuff")

        # 断开

        drive_map_del("X:")

        ----------------------------------------------------------------------------------------------------------------
        """
        return autoit.drive_map_del(device)

    def drive_map_get(self, device, buf_size=256):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        获取已映射网络驱动器的路径.

        Drive Map Get ( "设备名" [, buf_size=256])

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        device(设备名)               要查询的设备盘符(驱动器或打印机), 例如"O:" 或 "LPT1:"

        buf_size (缓冲区大小)        [可选参数] 默认值为256.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回映射路径, 例如 \\server\share

        失败: 返回一个空字符串 "" 并把 @error 设为 1.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        None.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Drive Map Add, Drive Map Del

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        # 使用当前用户映射 X: 驱动器到 \\myserver\stuff

        drive_map_add("X:", "\\myserver\stuff")

        # 获取映射详细信息

        print("驱动器 X: 映射到", DriveMapGet("X:"))

        ----------------------------------------------------------------------------------------------------------------
        """
        return autoit.drive_map_get(device, buf_size)

    def error(self):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        返回AutoIt的错误标识

        error()

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        无

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        AutoIt的错误标识

        ----------------------------------------------------------------------------------------------------------------
        """
        return autoit.error()

    def is_admin(self):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        检查当前用户是否拥有管理员权限

        Is Admin ( )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        None.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为 1,说明当前用户拥有管理员权限.

        失败: 返回值为 0,说明用户不是管理员.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        如果在 Windows Vista/2008/7 上返回1 只可能是拥有完整的 administrator 权限 (例如 #RequireAdmin 被使用并被用户确认,
        或者它已经被UAC提高了权限).

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        #RequireAdmin

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        if is_admin():

            print("本程序拥有管理员权限")

        ----------------------------------------------------------------------------------------------------------------
        """
        return autoit.is_admin()

    def mouse_click(self, button="left", x=INTDEFAULT, y=INTDEFAULT, clicks=1, speed=-1):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        执行鼠标点击操作.

        Mouse Click ( [ "按钮" [, X坐标, Y坐标 [, 点击次数 [, 速度 ]]]]] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        button(按钮)               [可选参数]要点击的按钮:"left"(左键),"right"(右键),"middle"(中键),"main"(主键),"menu"(菜单键),"primary"(主要按钮),"secondary"(次要按钮).

        X,Y坐标             [可选参数] 鼠标要移动到的目标坐标值 X/Y.若两者都留空则使用当前位置.

        clicks(点击次数)           [可选参数] 要点击鼠标按钮的次数.默认值为 1.

        speed(速度)               [可选参数] 鼠标移动速度,可设数值范围在 1(最快)和 100(最慢)之间.若设置速度为 0 则立即移动鼠标到指定位置.默认速度为 10.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回1.

        失败: 返回0, 按钮没有在列表中.或者使用了无效的参数.例如使用了X坐标而没有使用Y坐标.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        若给定的按钮是一个空字符串则将点击左键.

        如果X坐标或者Y坐标等于 Default 关键字 则相应鼠标坐标不会移动.

        若用户已通过控制面板切换了左右按钮则函数在处理这些按钮时将有不同的表现."Left" 和 "right" 永远只代表点击相应按钮(左或右),而不管按钮是否已被切换;"primary" 或 "main" 按钮将永远只代表点击主键,而不管按钮是否已被切换;"secondary" 或 "menu" 按钮通常将触发右键菜单,而不管按钮是否已被切换.

        [按钮]                       [正常情况下]                     [切换后]

        ""                            左键                             左键

        "left"                        左键                             左键

        "middle"                      中键                             中键

        "right"                       右键                             右键

        "primary"                     左键                             右键

        "main"                        左键                             右键

        "secondary"                   右键                             左键

        "menu"                        右键                             左键

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Mouse Click Drag, Mouse Get Pos, Mouse Move, Control Click, Mouse Down, Mouse Up, Mouse Wheel

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        # Double click at the current mouse pos

        mouse_click("left")

        mouse_click("left")

        # Double click at 0,500

        mouse_click("left", 0, 500, 2)

        # SAFER VERSION of Double click at 0,500 - takes into account user's control panel settings

        mouse_click("primary", 0, 500, 2)

        ----------------------------------------------------------------------------------------------------------------
        """
        return autoit.mouse_click(button, x, y, clicks, speed)

    def mouse_click_drag(self, x1, y1, x2, y2, button="left", speed=-1):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        执行鼠标拖曳操作.

        Mouse Click Drag ( X1坐标, Y1坐标, X2坐标, Y2坐标 [ "按钮", [, 速度]] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]


        X1坐标, Y1坐标            拖曳操作的起始坐标值 X/Y.

        X2坐标, Y2坐标            拖曳操作的结束坐标值 X/Y.

        button(按钮)                      要点击的按钮:"left"(左键),"right"(右键),"middle"(中键),"main"(主键),"menu"(菜单键),"primary"(主要按钮),"secondary"(次要按钮).

        speed(速度)                      [可选参数] 鼠标移动速度,可设数值范围在 1(最快)和 100(最慢)之间.若设置速度为 0 则立即移动鼠标到指定位置.默认速度为 10.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回1.

        失败: 返回0, 鼠标按钮不在列表里面.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        若给定的按钮是一个空字符串则将点击左键.

        若用户已通过控制面板切换了左右按钮则函数在处理这些按钮时将有不同的表现."Left" 和 "right" 永远只代表点击相应按钮(左或右),而不管按钮是否已被切换;"primary" 或 "main" 按钮将永远只代表点击主键,而不管按钮是否已被切换;"secondary" 或 "menu" 按钮通常将触发右键菜单,而不管按钮是否已被切换.详情请查看 MouseClick 函数中的表格

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Mouse Click, Mouse Get Pos, Mouse Move, Mouse Down, Mouse Up, Mouse Wheel

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        # 左键点击拖动从 0,200 到 600, 700

        mouse_click_drag("left", 0, 200, 600, 700)

        ----------------------------------------------------------------------------------------------------------------
        """
        return autoit.mouse_click_drag(x1, y1, x2, y2, button, speed)

    def mouse_down(self, button="left"):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        在当前位置产生一个鼠标按下(按键)事件.

        Mouse Down ( "按钮" )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        button(按钮)               要点击的按钮:"left"(左键),"right"(右键),"middle"(中键),"main"(主键),"menu"(菜单键),"primary"(主要按钮),"secondary"(次要按钮).

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回1.

        失败: 返回0, 鼠标按钮不在列表中.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        参考 MouseClick 说明.

        谨记:保证每个 MouseDown 事件总有其对应的 MouseUp 事件.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Mouse Up, Mouse Click, Mouse Click Drag, Mouse Get Pos, Mouse Move

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        import time

        mouse_down("left")

        time.sleep(0.1)

        mouse_up("left")

        ----------------------------------------------------------------------------------------------------------------
        """
        return autoit.mouse_down(button)

    def mouse_get_cursor(self):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        返回当前鼠标指针光标的ID.

        Mouse Get Cursor ( )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        None.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        返回的指针 ID 编号的意义:

            0 = UNKNOWN(未知,包括指针和手型图标)

            1 = APPSTARTING(后台运行)

            2 = ARROW(正常选择)

            3 = CROSS(精确定位)

            4 = HELP(帮助选择)

            5 = IBEAM(选定文本)

            6 = ICON(图标)

            7 = NO(不可用)

            8 = SIZE(设置大小)

            9 = SIZEALL(移动)

            10 = SIZENESW(东北西南沿对角线调整)

            11 = SIZENS(垂直调整)

            12 = SIZENWSE(西北东南沿对角线调整)

            13 = SIZEWE(水平调整)

            14 = UPARROW(候选)

            15 = WAIT(忙碌)

            16 = HAND(手型)

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        None.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        MouseGetPos

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        import time

        time.sleep(2) #allow time to move mouse before reporting ID

        #create an array that tells us the meaning of an ID Number

        IDs = ("AppStarting|Arrow|Cross|Help|IBeam|Icon|No|" + "Size|SizeAll|SizeNESW|SizeNS|SizeNWSE|SizeWE|UpArrow|Wait|Hand").split("|")

        IDs[0] = "Unknown"

        cursor = mouse_get_cursor()

        print("ID = " + cursor, "Which means " + IDs[cursor])

        ----------------------------------------------------------------------------------------------------------------
        """
        return autoit.mouse_get_cursor()

    def mouse_get_pos(self):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        获取当前鼠标的坐标位置.

        Mouse Get Pos (  )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        无

        [返回值]

        [维数]                      [值]

        无                      返回一个包含鼠标坐标的2元素一维数组array: $array[0] = X 坐标 (横向), $array[1] = Y 坐标 (垂直)

        0                      只返回X坐标,值为整数型.

        1                      只返回Y坐标,值为整数型.

        如果"维数"不是数值, 将设置@error为 1.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        参考 MouseCoordMode 相对/绝对位置设置.如果设置为相对位置,数字可能是负数.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Mouse Click, Mouse Click Drag, Mouse Move, Mouse Down, Mouse Get Cursor, Mouse Up, Mouse Wheel, Pixel Get Color

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        pos = mouse_get_pos()

        print("鼠标坐标 X,Y:", pos[0] + "," + pos[1])

        ----------------------------------------------------------------------------------------------------------------
        """
        return autoit.mouse_get_pos()

    def mouse_move(self, x, y, speed=-1):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        移动鼠标指针.

        Mouse Move ( X坐标, Y坐标 [, 速度] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        X坐标           要移动到的屏幕上目标位置的 X 坐标.

        Y坐标           要移动到的屏幕上目标位置的 Y 坐标.

        speed(速度)            [可选参数] 鼠标移动速度,可设数值范围在 1(最快)和 100(最慢)之间.若设置速度为 0 则立即移动鼠标到指定位置.默认速度为 10.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        None.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        若 Mouse Move 操作耗时较长则将干扰用户的鼠标移动.

        若 MouseCoordMode 设置为相对位置则坐标值可使用负数.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Mouse Click, Mouse Click Drag, Mouse Get Pos,, Mouse Down, Mouse Up, Mouse Wheel

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        mouse_move(10, 100)

        mouse_move(700, 700, 0)

        ----------------------------------------------------------------------------------------------------------------
        """
        return autoit.mouse_move(x, y, speed)

    def mouse_up(self, button="left"):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        在当前位置产生一个鼠标释放(按键)事件.

        Mouse Up ( "按钮" )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        button(按钮)               要点击的按钮:"left"(左键),"right"(右键),"middle"(中键),"main"(主键),"menu"(菜单键),"primary"(主要按钮),"secondary"(次要按钮).

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回1.

        失败: 返回0, 鼠标按钮不在列表中.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        参考 Mouse Click 相关.

        谨记:保证每个 Mouse Down 事件总有其对应的 Mouse Up 事件.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Mouse Down, Mouse Click, Mouse Click Drag, Mouse Get Pos, Mouse Move

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        import time

        mouse_down("left")

        time.sleep(0.1)

        mouse_up("left")

        ----------------------------------------------------------------------------------------------------------------
        """
        return autoit.mouse_up(button)

    def mouse_wheel(self, direction, clicks=-1):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        产生向上或向下滚动鼠标滚轮事件.仅支持NT/2000/XP及更高.

        Mouse Wheel ("方向" [, 点击次数])

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        direction(方向)             "up"(上) 或 "down"(下)

        clicks(点击次数)          [可选参数] 滚动的次数.默认值为 1.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回1

        失败: 返回0,方向不正确.

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        本函数仅支持 NT,2000,XP 及更高版本的系统.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        Mouse Click, Mouse Click Drag, Mouse Get Pos, Mouse Move

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        # 鼠标轮轴向上滚动 10 次

        mouse_wheel("up", 10)

        ----------------------------------------------------------------------------------------------------------------
        """
        return autoit.mouse_wheel(direction, clicks)

    def opt(self, option, value):
        """
        ----------------------------------------------------------------------------------------------------------------

        [描述]

        调整 AutoIt 各种函数/参数的运作方式.

        Opt ( "选项" [, 参数] )

        ----------------------------------------------------------------------------------------------------------------

        [参数]

        option(选项)          要修改的选项.请查看下面的注意部分.

        value(参数)          [可选参数] 需要分配给选项的值. 因设置的选项不同而类型与意思不同. 参考下面的注意部分. 如果没有参数, 函数会返回目前的选项值. 关键字 Default 可以用于重置选项为默认值.

        ----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回返回上一次设置的值.

        失败: 设置错误为非零. 失败可能是因为参数无效(比如选项根本不存在).

        ----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        您可以使用 Opt() 来代替 Auto It Set Option().

        有效的属性包括:

        [选项]                                   [参数]

        CaretCoordMode          设置用于插入符(caret)函数的坐标参照,可以是绝对位置也可以是相对当前激活窗口的坐标位置.
        0 = 相对激活窗口的坐标
        1 = 屏幕的绝对位置(默认)
        2 = 相对激活窗口客户区的坐标

        ExpandEnvStrings         更改字面字符串和 % 符号的解释方式.默认情况下字符串按原文解释,此选项允许您在字符串中使用形如 %environment% 这样的环境变量,例如 "临时文件夹的路径是: %temp%".
        1 = 展开环境变量(类似于 AutoIt v2)
        0 = 不展开展环境变量(默认)
        若未设置此选项则要实现类似功能的方法是:"临时文件夹的路径是: " & EnvGet("temp")

        ExpandVarStrings         更改字面字符串和变量/宏($ 和 @)符号的解释方式.默认情况下字符串按原文解释,此选项允许您在字符串中使用变量和宏,例如 "变量 var1 的值是 $var1$".
        1 = 展开变量(在此模式下如果要表示 $ 或 @ 本身则请用连续两个相应符号表示,例如:"这里有一个美元符号 $$").
        0 = 不展开变量(默认)

        GUICloseOnESC            当用户在一个GUI窗口(处于激活状态时)按下 ESC 键则$GUI_EVENT_CLOSE 消息将被发送.此选项用以切换这一行为.
        1 = 在按下 ESC 时发送消息 $GUI_EVENT_CLOSE(默认).
        0 = 在按下 ESC 时不发送消息 $GUI_EVENT_CLOSE

        GUICoordMode              设置用于 GUICtrlSetPos 函数的坐标参照.
        1 = 绝对坐标(默认)将相对于对话框.
        0 = 相对于上一个控件的起始位置(左上角).
        2 = 相对于当前位置的坐标. A -1 for left or top parameter don't increment the start.
        So next line is -1,offset; next cell is offset,-1; 当前单元为 -1,-1.
        Obviously "offset" cannot be -1 which reserved to indicate the no increment. But if you can use a multiple of the width you choose to skip or go back.

        GUIDataSeparatorChar       定义 GUICtrlSetData 函数里面的分割符.
         默认字符为: '|'.

        GUIOnEventMode             启用/关闭 OnEvent 函数通知.
        0 = (默认)取消.
        1 = 启用.

        GUIResizeMode               更改控件大小调整的模式.
        0 = (默认)不调整
        <1024 = 详情请查看 GUICtrlSetResizing.

        GUIEventOptions             修改特殊的 GUI 函数的返回值类型.
        0 = (默认) 当窗口被最小化,还原,最大化,改变大小,只通知
        1 = 当窗口发生最小化,最大化,改变大小,就禁止这种事件并立即发出通知,等待自定义函数进行处理.

        MouseClickDelay              更改每个鼠标点击命令之间的延迟时间长度.
        以毫秒为单位(默认值 =10).

        MouseClickDownDelay           更改在松开按键之前按住按钮的时间长度.
        以毫秒为单位(默认值 = 10).

        MouseClickDragDelay           更改鼠标开始拖曳到结束拖曳之间的时间长度.
        以毫秒为单位(默认值 = 250).

        MouseCoordMode                 设置用于鼠标函数的坐标参照,可以是绝对位置也可以是相对当前激活窗口的坐标位置.
        0 = 相对激活窗口的坐标
        1 = 屏幕的绝对位置(默认)
        2 = 相对激活窗口客户区的坐标

        MustDeclareVars                如果设置了此选项为1则所有变量在使用之前必须先使用 Dim/Local/Global 声明,这将有助于减少各种因误拼变量而引起的bug的出现.
        1 = 变量必须先声明
        0 = 变量不需预先声明(默认)

        PixelCoordMode                 设置用于象素函数的坐标参照,可以是绝对位置也可以是相对当前激活窗口的坐标位置.
        0 = 相对激活窗口的坐标
        1 = 屏幕的绝对位置(默认)
        2 = 相对激活窗口客户区的坐标

        SendAttachMode SendAttachMode               指定在使用 Send() 函数时 AutoIt 是否捆绑(attach)输入线程.当不捆绑的时候(默认模式 = 0)对 capslock/scrolllock/numlock 等按键状态的检测将是不准确的(指在 NT4 下).不过,在设置捆绑模式 = 1的时候,Send("{... down/up}") 等语法将不被支持,在发送按键的时候也可能会导致系统挂起等问题.至于 ControlSend() 函数则 总是 捆绑线程的,而且不受此模式设置的影响.
        0 = 不捆绑(默认)
        1 = 捆绑

        SendCapslockMode                         指定是否让 AutoIt 在执行 Send 函数之前保存大小写切换键(CapsLock)的状态并在完成操作后恢复到原来的状态.
        0 = 不保存/恢复
        1 = 保存并恢复(默认)

        SendKeyDelay                    更改发送键击命令之间的延迟时间长度.
        以毫秒为单位(默认值=5).设置此值为0时也许会无效,这时请使用1代替.

        SendKeyDownDelay                更改在每次键击期间(松开按键之前)按住按键的时间长度.对于一些需要花费一定时间才能注册按键的应用程序,您可能就要提高这一数值.
        以毫秒为单位(默认值 = 5).

        TCPTimeout                      a name="TCPTimeout">定义TCP 函数连接时最大延迟事件(超过就不再连接).
        单位为毫秒(默认100毫秒)

        TrayAutoPause                   当单击托盘图标时是否暂停.
        0 = 不暂停
        1 = 暂停(默认). 要是已经禁用了暂停菜单,这里失效(参考TrayMenuMode)

        TrayIconDebug                    在托盘图标上显示当前脚本执行到的那一行的相关信息(工具提示)以助调试.
        0 = 不显示调试信息(默认)
        1 = 显示调试信息

        TrayIconHide                     隐藏 AutoIt 托盘图标.注意:托盘图标仍会在程序刚运行时出现大约 750 毫秒.
        0 = 显示托盘图标(默认)
        1 = 隐藏托盘图标

        TrayMenuMode                     扩展脚本在 系统托盘图标/菜单里面的事件. 这个选项可以结合多个选项:
        0 = 默认菜单项目(脚本暂停中.../退出) 扩展到系统托盘图标; 用户添加的项目自动的取消选中; 如果您双击系统托盘图标,那么返回值为默认样式 (default).
        1 = 没有默认菜单
        2 = 用户创建的菜单单击过后不会自动的取消选中状态.
        4 = 双击系统托盘图标不会返回菜单项目ID.
        8 = 关闭项目组的单选检查

        TrayOnEventMode                  应用/关闭 OnEvent 函数通知于系统托盘图标.
        0 = (默认) 关闭
        1 = 应用

        WinDetectHiddenText              指定是否让隐藏的窗口文本也能被窗口匹配函数"看见"(可用于窗口文本参数).
        0 = 不检测隐藏文本(默认)
        1 = 检测隐藏文本

        WinSearchChildren                允许窗口搜索程序在搜索顶层窗口的同时也搜索子窗口.
        0 = 仅搜索顶层窗口(默认)
        1 = 搜索顶层窗口及子窗口.

        WinTextMatchMode                   更改窗口函数在执行搜索操作时的窗口文本匹配模式.
        1 = 完全匹配(较慢)模式(默认)
        2 = 快速模式
        在快速匹配模式下,AutoIt 将只能"看见"对话框文本、按钮文本和某些控件的标题,而在默认模式下则能检测到更多的文本(例如记事本窗口的内容).
        如果在执行较多窗口的搜索操作时遇到性能(指速度)上的问题,那么您就应该考虑使用快速模式.

        WinTitleMatchMode                  更改窗口函数在执行搜索操作时的标题匹配模式.
        1 = 只匹配标题的前面部分(默认)
        2 = 标题的任意子串皆可匹配
        3 = 完全匹配标题
        4 = 高级模式,详情请查看 窗口标题与文本(高级)
        -1 到 -4 = 强制小写匹配.

        WinWaitDelay                        更改每次成功执行窗口相关操作后的延迟时间长度.
        以毫秒为单位(默认值 = 250).

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        相当多!

        ----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        #可直接复制所需语句到脚本中         #最先列出的是各项属性的默认值

        opt("CaretCoordMode", 1)        #1=绝对位置, 0=相对位置, 2=客户区

        opt("ExpandEnvStrings", 0)      #0=不展开, 1=展开

        opt("ExpandVarStrings", 0)      #0=不展开, 1=展开

        opt("GUICloseOnESC", 1)         #1=按下 ESC 将关闭窗口, 0=按下 ESC 将不关闭窗口

        opt("GUICoordMode", 1)          #1=绝对位置, 0=相对位置, 2=单元格

        opt("GUIDataSeparatorChar","|")  #"|"为默认

        opt("GUIOnEventMode", 0)        #0=取消, 1=启用 OnEvent 模式

        opt("GUIResizeMode", 0)         #0=不调整, <1024 特定的调整值

        opt("GUIEventOptions",0)        #0=默认, 1=立即通知, 2=GuiCtrlRead 标签索引

        opt("MouseClickDelay", 10)      #10 毫秒

        opt("MouseClickDownDelay", 10)  #10 毫秒

        opt("MouseClickDragDelay", 250)  #250 毫秒

        opt("MouseCoordMode", 1)        #1=绝对位置, 0=相对位置, 2=客户区

        opt("PixelCoordMode", 1)        #1=绝对位置, 0=相对位置, 2=客户区

        opt("SendAttachMode", 0)        #0=不捆绑, 1=捆绑

        opt("SendCapslockMode", 1)      #1=保存并恢复, 0=不保存

        opt("SendKeyDelay", 5)          #5 毫秒

        opt("SendKeyDownDelay", 1)      #1 毫秒

        opt("TCPTimeout",100)           #100 毫秒

        opt("TrayAutoPause",1)          #0=不暂停, 1=暂停

        opt("TrayIconDebug", 0)         #0=无信息, 1=调试信息

        opt("TrayIconHide", 0)          #0=显示, 1=隐藏托盘图标

        opt("TrayMenuMode",0)           #0=扩展, 1=没有默认菜单, 2=没有自动 check, 4=菜单项目ID 不返回

        opt("TrayOnEventMode",0)        #0=关闭, 1=启用

        opt("WinDetectHiddenText", 0)   #0=不检测, 1=检测

        opt("WinSearchChildren", 1)     #0=不搜索, 1=搜索子窗口

        opt("WinTextMatchMode", 1)      #1=完全匹配, 2=快速匹配

        opt("WinTitleMatchMode", 1)     #1=开头, 2=子串, 3=完全, 4=高级 , -1 to -4=Nocase

        opt("WinWaitDelay", 250)        #250 毫秒

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.opt(option, value)

    def pixel_checksum(self, left, top, right, bottom, step=1):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        生成某区域象素的校验和.

        Pixel Checksum ( 左侧, 顶部, 右侧, 底部 [, 步进]] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        left(左侧)            矩形区域左侧的坐标.

        top(顶部)             矩形区域顶部的坐标.

        right(右侧)           矩形区域右侧的坐标.

        bottom(底部)          矩形区域底部的坐标.

        step(步进)            [可选参数] 默认情况下每个象素都要校验一次,而此参数可跳过指定数量的象素才校验(可提升执行速度).例如,数值2表示每隔一个象素才校验一次.默认值为 1. 不推荐步进值超过 1 .

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回指定区域的校验和.

        失败: 返回 0.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        校验和使我们能检查某个区域里"某些地方"是否有变化,但我们却无从知道具体有什么变化 - 它不会告诉你哪里发生了变化.

        上一个版本里,工作非常慢, 因此现在将校检写得更快了. 使用步进参数也不再被推荐. The performance gain from using a larger step is not nearly as noticeable since the function is faster all around. Also, the larger the step, the less reliable the checksum becomes when used to detect small changes in the region.

        CRC32 校检略为比 ADLDER 校检慢,但是校检精度更高.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Pixel Get Color, Pixel Search

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        import time

        # Wait until something changes in the region 0,0 to 50,50

        # Get initial checksum

        checksum = pixel_checksum(0, 0, 50, 50)

        # Wait for the region to change, the region is checked every 100ms to reduce CPU load

        While checksum = pixel_checksum(0, 0, 50, 50):

            time.sleep(0.1)

        print("Something in the region has changed!")

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.pixel_checksum(left, top, right, bottom, step)

    def pixel_get_color(self, x, y):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        返回指定坐标位置上的象素点的颜色值.

        Pixel Get Color ( X坐标 , Y坐标 )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        X坐标         X坐标值.

        Y坐标         Y坐标值.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回指定象素颜色的 十进制 值.

        失败: 返回 -1 ,说明给定的坐标不合法.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        None

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Pixel Search, Mouse Get Pos, Pixel Checksum

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        var = pixel_get_color(10, 100)

        print("十进制颜色为", var)

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.pixel_get_color(x, y)

    def pixel_search(self, left, top, right, bottom, col, var=1, step=1):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        在指定矩形区域中搜寻与指定颜色值匹配的象素(并返回第一个匹配的象素的坐标).

        Pixel Search ( 左侧, 顶部, 右侧, 底部, 颜色 [, 色差 [, 步进]] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        left(左侧)                矩形区域左侧的坐标.

        top(顶部)                 矩形区域顶部的坐标.

        right(右侧)               矩形区域右侧的坐标.

        bottom(底部)              矩形区域底部的坐标.

        col(颜色)                 要搜索的颜色值(十进制或十六进制皆可).

        var(色差)                 [可选参数] 一个介于0到255之间的数值,用以指定允许的颜色偏差范围.默认值为0(表示完全匹配).

        step(步进)                [可选参数] 默认情况下每个象素都要校验一次,而此参数可跳过指定数量的象素才校验(可提升执行速度).例如,数值2表示每隔一个象素才校验一次.默认值为 1.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回一个含有两个元素的数组,分别储存着指定象素的坐标(Array[0] = x , Array[1] = y)

        失败: 把 @error 设为 1,说明指定的颜色未被发现.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        搜索方向将为下方值:

            从左到右 - 左<右

            从右到左 - 右<左

            从上到下 - 上<下

            从下到上 - 下<上

        修改搜索方向可以为频繁搜索进行优化.

        记住, 在典型的显示器中 1024 x 768 分辨率有 786432 个像素. 虽然 PixelSearch 被优化过, 减小搜索区域能帮助加快搜索速度.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Pixel Checksum, Pixel Get Color

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        # Find a pure red pixel in the range 0,0-20,300

        coord = pixel_search(0, 0, 20, 300, 0xFF0000)

        if not error():

            print("X and Y are:", coord[0] + "," + coord[1])

        # Find a pure red pixel or a red pixel within 10 shades variations of pure red

        coord = pixel_search(0, 0, 20, 300, 0xFF0000, 10)

        if not error():

            print("X and Y are:", coord[0] + "," + coord[1])

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.pixel_search(left, top, right, bottom, col, var, step)

    def process_close(self, process):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        终止某个进程.

        Process Close ( "进程")

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        process(进程)             要终止的进程的名称或 PID(进程标识符).

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1.

        失败: 返回 0 并设置 @error 到:

         1 = 打开进程失败
         2 = AdjustTokenPrivileges 失败
         3 = 终止进程失败
         4 = 不能验证进程是否存在

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        进程名是指可执行文件的名称(无需给出完整路径),例如:"notepad.exe" 或 "winword.exe"

        若有多个进程的名称相同则 PID 最高的进程将被结束(并不是以最近启动的进程为准).

        PID 是标识进程的唯一的数值.PID 可通过 ProcessExists 或 Run 命令的返回值获得.

        每隔 250 毫秒左右进程将被检测一次.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Process Exists, Process Wait, Process Wait Close, Run, Win Close, Process List, Run As, Shutdown, Win Kill

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        process_close("notepad.exe")


        PID = process_exists("notepad.exe") # Will return the PID or 0 if the process isn't found.

        if PID:

            process_close(PID)

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.process_close(process)

    def process_exists(self, process):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        检查指定进程是否存在.

        Process Exists ( "进程" )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        process(进程)            要检查的进程的名称或 PID(进程标识符).

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回进程的 PID .

        失败: 返回0,进程不存在.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        进程名是指可执行文件的名称(无需给出完整路径),例如:"notepad.exe" 或 "winword.exe"

        PID 是标识进程的唯一的数值.

        每隔 250 毫秒左右进程将被检测一次.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Process Close, Process Wait, Process Wait Close, Win Exists, Process List

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        if process_exists("notepad.exe"):

            print("例子", "记事本确实在运行.")

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.process_exists(process)

    def process_set_priority(self, process, priority):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        设置某个进程的优先级.

        Process Set Priority ( "进程", 优先级 )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        process(进程)           要设置的进程的名称或 PID(进程标识符).

        priority(优先级)         要设置的优先级

            0 - 空闲/低

            1 - 低于标准

            2 - 标准

            3 - 高于标准

            4 - 高

            5 - 实时(请谨慎使用,可能会导致系统不稳定)

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为 1.

        失败: 返回值为0并把 @error 设为 1.若试图使用不支持的优先级则把 @error 设为 2.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        None.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Process List

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("Notepad.exe")

        process_set_priority("notepad.exe", 0)

        # 设置记事本的优先级为：空闲/低

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.process_set_priority(process, priority)

    def process_wait(self, process, timeout=0):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        暂停脚本的执行直至给定进程出现为止.

        Process Wait ( "进程名" [, 超时时间] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        process(进程名)           目标进程的名称.

        timeout(超时时间)         [可选参数] 指定要等待的时间长度(默认为一直等待).

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 进程PID.

        失败: 返回 0,已超时.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        进程名是指可执行文件的名称(无需给出完整路径),例如:"notepad.exe" 或 "winword.exe"

        每隔 250 毫秒左右进程将被检测一次.

        本函数是唯一一个不接受PID作为参数的进程函数,这是因为 PID 是随机分配的,等待一个特定的 PID 出现并没有任何意义.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Process Close, Process Exists, Process Wait Close, Run Wait, Win Wait, Win Wait Active, Process List, Run As Wait, Win Get Process

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        process_wait("notepad.exe")

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.process_wait(process, timeout)

    def process_wait_close(self, process, timeout=0):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        暂停脚本的执行直至给定进程不再存在为止.

        Process Wait Close ( "进程名" [, 超时时间] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        process(进程名)              目标进程的名称或 PID(进程标识符).

        timeout(超时时间)            [可选参数] 指定要等待的时间长度(默认为一直等待).

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回1并设置 @extended 为进程退出代码.

        失败: 返回0 ,超时. 当无效PID时 @error 设置为非0 并且 @extended 设置为 0xCCCCCCCC.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        进程名是指可执行文件的名称(无需给出完整路径),例如:"notepad.exe" 或 "winword.exe"

        PID 是标识进程的唯一的数值.PID 可通过 ProcessExists 或 Run 命令的返回值获得.

        每隔 250 毫秒左右进程将被检测一次.

        如果进程不存在,返回1.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Process Close, Process Exists, Process Wait, Run Wait, Win Wait Close, Process List, Run As Wait, Win Get Process

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        #暂停脚本的执行,直至记事本进程不再存在为止.

        process_wait_close("notepad.exe")

        # 运行记事本,等待记事本进程结束后再执行脚本.

        PID = run("notepad.exe")

        process_wait_close(PID)

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.process_wait_close(process, timeout)

    from autoit import properties
    def run(self, filename, work_dir="", show_flag=properties.SW_SHOWNORMAL):
        '''
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        运行外部程序.

        Run ( "程序" [, "工作目录" [, 显示标志]] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        filename(程序)               程序所在的完整路径(文件格式为 EXE,BAT,COM 或 PIF).

        work_dir(工作目录)           [可选参数] 工作目录.这个路径不一定指向程序所在路径.

        show_flag(显示标志)          [可选参数] 启动程序时的初始状态:

            SW_HIDE = 0

            SW_MAXIMIZE = 3

            SW_MINIMIZE = 6

            SW_RESTORE = 9

            SW_SHOW = 5

            SW_SHOWDEFAULT = 10

            SW_SHOWMAXIMIZED = 3

            SW_SHOWMINIMIZED = 2

            SW_SHOWMINNOACTIVE = 7

            SW_SHOWNA = 8

            SW_SHOWNOACTIVATE = 4

            SW_SHOWNORMAL = 1

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回所运行程序的 PID(进程标识符).

        失败: 返回0并设置 @error 为非0值.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        如果路径中含有空格,请在两侧添加英文引号(").

        要运行 DOS(控制台)命令,请使用 Run(@ComSpec & " /c " & 'commandName', "", @SW_HIDE) ;不要忘了 "/c" 前面的 " "

        在运行指定程序后脚本将(立即)继续执行后面的语句.若要在指定程序执行完毕之前暂停脚本的执行则请使用 RunWait 函数代替.

        Providing the Standard I/O parameter with the proper values permits interaction with the child process through the StderrRead, StdinWrite and StdoutRead functions. Combine the flag values (or use $STDERR_CHILD, $STDIN_CHILD & $STDOUT_CHILD, defined in Constants.au3) to manage more than one stream.

        In order for the streams to close, the following conditions must be met: 1) The child process has closed it's end of the stream (this happens when the child closes). 2) AutoIt must read any captured streams until there is no more data. 3) If STDIN is provided for the child, StdinWrite() must be called to close the stream. Once all streams are detected as no longer needed, all internal resources will automatically be freed.
        StdioClose 可以用于强制关闭 STDIO 流.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Run Wait, Run As, Run As Wait, Shell Execute, Shell Execute Wait, Stderr Read, Stdin Write, Stdout Read, Stdio Close, Process Close, Console Read

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("Notepad.exe", "", 3)

        -----------------------------------------------------------------------------------------------------------------
        '''
        return autoit.run(filename, work_dir, show_flag)

    def run_as(self, user, domain, password, filename, logon_flag=1, work_dir="", show_flag=properties.SW_SHOWNORMAL):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        使用一个不同的用户运行一个外部程序文件.

        Run As ( "用户名", "域名", "密码", "程序", 登录标志 [, "工作目录" [, 显示标志]] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        user(用户名)             需要使用的用户名.

        domain(域名)              用于甄别的域名称.

        password(密码)            用户的密码.

        filename(程序)            程序所在的完整路径(文件格式为 EXE,BAT,COM 或 PIF).

        logon_flag(登录标志)         0 - 不加载配置文件的交互式登录.
            1 - 加载配置文件的交互式登录.
            2 - 只是网络认证.
            4 - 继承调用程序的环境变量替换用户的环境变量.

        work_dir(工作目录)          [可选参数] 程序工作目录. 如果不指定, 将会被设置为 @SystemDir .这个路径不一定指向程序所在路径.

        show_flag(显示标志)         [可选参数] 执行程序的 "显示" 标志:

            SW_HIDE = 0

            SW_MAXIMIZE = 3

            SW_MINIMIZE = 6

            SW_RESTORE = 9

            SW_SHOW = 5

            SW_SHOWDEFAULT = 10

            SW_SHOWMAXIMIZED = 3

            SW_SHOWMINIMIZED = 2

            SW_SHOWMINNOACTIVE = 7

            SW_SHOWNA = 8

            SW_SHOWNOACTIVATE = 4

            SW_SHOWNORMAL = 1

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 运行的进程的 PID .

        失败: 返回 0 并设置 @error 为一个非0值

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        Paths with spaces need to be enclosed in quotation marks.

        It is important to specify a working directory the user you are running as has access to, otherwise the function will fail.

        It is recommended that you only load the user's profile is you are sure you need it. There is a small chance a profile can be stuck in memory under the right conditions. If a script using RunAs() happens to be running as the SYSTEM account (for example, if the script is running as a service) and the user's profile is loaded, then you must take care that the script remains running until the child process closes.

        When running as an administrator, the Secondary Logon (RunAs) service must be enabled or this function will fail. This does not apply when running as the SYSTEM account.

        After running the requested program the script continues. To pause execution of the script until the spawned program has finished use the RunAsWait function instead.

        Providing the Standard I/O parameter with the proper values permits interaction with the child process through the StderrRead, StdinWrite and StdoutRead functions. Combine the flag values (or use $STDERR_CHILD, $STDIN_CHILD & $STDOUT_CHILD, defined in Constants.au3) to manage more than one stream.

        In order for the streams to close, the following conditions must be met: 1) The child process has closed it's end of the stream (this happens when the child closes). 2) AutoIt must read any captured streams until there is no more data. 3) If STDIN is provided for the child, StdinWrite() must be called to close the stream. Once all streams are detected as no longer needed, all internal resources will automatically be freed.
        StdioClose can be used to force the STDIO streams closed.

        The "load profile" and "network credentials only" options are incompatible. Using both will produce undefined results.

        There is an issue in the Windows XP generation of Windows which prevents STDIO redirection and the show flag from working. See Microsoft Knowledge Base article KB818858 for more information about which versions are affected as well as a hotfix for the issue. User's running Windows 2000, Windows XP SP2 or later, or Windows Vista are not affected.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Run, Run Wait, Run As Wait, Shell Execute, Shell Execute Wait, Stderr Read, Stdin Write, Stdout Read, Stdio Close, Process Close

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        # Fill in the username and password appropriate for your system.

        sUserName = "Username"

        sPassword = "Password"

        # Run a command prompt as the other user.

        run_as(sUserName, @ComputerName, sPassword, "cmd.exe", 0)

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.run_as(user, domain, password, filename, logon_flag, work_dir, show_flag)

    def run_as_wait(self, user, domain, password, filename, logon_flag=1, work_dir="", show_flag=properties.SW_SHOWNORMAL):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        在不同的用户环境中运行一个外部程序并暂停脚本执行直到程序结束.

        Run As Wait ( "用户名", "域", "密码", "程序", 登录标志 [, "工作目录" [, 显示标志]] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        user(用户名)                 登录的用户名.

        domain(域)                  依赖验证的域.

        password(密码)               用户的登录口令.

        filename(程序)               程序所在的完整路径(文件格式为 EXE,BAT,COM 或 PIF).

        logon_flag(登录标志)           0 - 交互登录,没有 profile.
        1 - 交互登录,有 profile.
        2 - 只使用网络证书.
        4 - 继承调用过程环境而非用户的.

        work_dir(工作目录)             [可选参数] 工作目录. 如果不指定, 则使用 @SystemDir.这个路径不一定指向程序所在路径.

        show_flag(显示标志)            [可选参数] 执行程序的显示状态:

            SW_HIDE = 0

            SW_MAXIMIZE = 3

            SW_MINIMIZE = 6

            SW_RESTORE = 9

            SW_SHOW = 5

            SW_SHOWDEFAULT = 10

            SW_SHOWMAXIMIZED = 3

            SW_SHOWMINIMIZED = 2

            SW_SHOWMINNOACTIVE = 7

            SW_SHOWNA = 8

            SW_SHOWNOACTIVATE = 4

            SW_SHOWNORMAL = 1

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功:  返回运行程序的退出代码.

        失败:  返回 0 并设置 @error 为非零.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        Paths with spaces need to be enclosed in quotation marks.

        It is important to specify a working directory the user you are running as has access to, otherwise the function will fail.

        It is recommended that you only load the user's profile is you are sure you need it. There is a small chance a profile can be stuck in memory under the right conditions. If a script using RunAs() happens to be running as the SYSTEM account (for example, if the script is running as a service) and the user's profile is loaded, then you must take care that the script remains running until the child process closes.

        When running as an administrator, the Secondary Logon (RunAs) service must be enabled or this function will fail. This does not apply when running as the SYSTEM account.

        After running the requested program the script pauses until the program terminates. To run a program and then immediately continue script execution use the RunAs function instead.

        Some programs will appear to return immediately even though they are still running; these programs spawn another process - you may be able to use the ProcessWaitClose function to handle these cases.

        The "load profile" and "network credentials only" options are incompatible. Using both will produce undefined results.

        There is an issue in the Windows XP generation of Windows which prevents STDIO redirection and the show flag from working. See Microsoft Knowledge Base article KB818858 for more information about which versions are affected as well as a hotfix for the issue. User's running Windows 2000, Windows XP SP2 or later, or Windows Vista are not affected.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Process Wait, Process Wait Close, Run, Run Wait, Shell Execute, Shell Execute Wait, Run As

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        # Fill in the username and password appropriate for your system.

        sUserName = "Username"

        sPassword = "Password"

        # Run a command prompt as the other user.

        pid = run_as_wait(sUserName, @ComputerName, sPassword, "cmd.exe", 0)

        # Wait for the process to close.

        process_waitClose(pid)

        # Show a message.

        print("The process we were waiting for has closed.")

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.run_as_wait(user, domain, password, filename, logon_flag, work_dir, show_flag)

    def run_wait(self, filename, work_dir="", show_flag=properties.SW_SHOWNORMAL):
        '''
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        运行一个外部程序并暂停脚本的执行直至该程序执行完毕.

        Run Wait ( "程序路径" [, "工作目录" [, 显示标志]] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        filename(程序路径)          要执行的可执行文件的完整路径(文件格式为 EXE,BAT,COM 或 PIF).(参考备注)

        work_dir(工作目录)          [可选参数] 工作目录.不一定非得是程序所在的目录.

        show_flag(显示标志)          [可选参数] 启动程序时的"显示"状态:

            SW_HIDE = 0

            SW_MAXIMIZE = 3

            SW_MINIMIZE = 6

            SW_RESTORE = 9

            SW_SHOW = 5

            SW_SHOWDEFAULT = 10

            SW_SHOWMAXIMIZED = 3

            SW_SHOWMINIMIZED = 2

            SW_SHOWMINNOACTIVE = 7

            SW_SHOWNA = 8

            SW_SHOWNOACTIVATE = 4

            SW_SHOWNORMAL = 1

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回所运行程序的退出代码.

        失败: 返回 0 并设置@error为非0.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        路径中含有空白字符(如:空格)需要使用引号引起来.

        要运行 DOS(控制台)命令,请使用 RunWait(@ComSpec & " /c " & "命令") ; 不要忘了 "/c" 前的 " "

        在指定的程序运行时脚本将暂停执行直到该程序终止为止.若要运行该程序并立即继续执行脚本的后面语句请使用 Run 函数代替.

        有些程序会立即(使脚本)返回(并执行后面的语句),即使这些程序仍在运行中;这些程序启动了其它进程,您可以试试使用 ProcessWaitClose 函数来处理这种情况.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Process Wait, Process Wait Close, Run, Shell Execute, Shell Execute Wait, Run As, Run As Wait

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        import os

        val = run_wait(os.environ.get("windir") + "/Notepad.exe", os.environ.get("windir"), 3)

        # 脚本将会等待记事本退出.

        print("程序退出代码:", val)

        -----------------------------------------------------------------------------------------------------------------
        '''
        return autoit.run_wait(filename, work_dir, show_flag)

    def send(self, send_text, mode=0):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        向激活窗口发送模拟键击操作.

        Send ( "按键" [, 标志] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        send_text(按键)             要发送的按键序列.

        mode(标志)                 [可选参数] 更改程序处理"按键"的方式:
          标志 = 0 (默认),按键序列中含有的特殊字符比如 + 和 ! 将被视为 SHIFT 和 ALT 键.
          标志 = 1, 按键将按原样发送.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        None.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        关于使用 Send 函数的更多说明/技巧请查看 附录 .AutoIt 可发送所有的 ASCII 码及扩展 ASCII 码字符(0-255),若要发送 UNICODE 编码的字符则必须使用"ASC"选项加上您要发送的字符代码(见下面的 {ASC}).

        "Send" 命令的语法跟 ScriptIt 以及 Visual Basic 的 "SendKeys" 命令类似.字符序列将按原文发送,但下列字符除外:

        '!'

        表示告知 AutoIt 要发送一个 ALT 键击动作,因此语句 Send("This is text!a") 的意思是按序发送按键 "This is text" 然后在按下"ALT+a".

        有些程序对大小写字符和 ALT 键相当挑剔,举例来说,"!A" 可能会被认为不同于 "!a";第一个代表 ALT+SHIFT+A,而第二个则代表 ALT+a.如果拿不准的话最好使用小写!

        '+'

        表示告知 AutoIt 要发送一个 SHIFT 键击动作,因此语句 Send("Hell+o") 的意思是按序发送按键 "HellO".Send("!+a") 表示发送 "ALT+SHIFT+a".

        '^'

        表示告知 AutoIt 要发送一个 CONTROL 键击动作,因此语句 Send("^!a") 的意思是发送按键 "CTRL+ALT+a".

        有些程序对大小写字符和 CTRL 键相当挑剔,举例来说, "^A" 可能会被认为不同于 "^a";第一个代表 CTRL+SHIFT+A,而第二个则代表 CTRL+a. 如果拿不准的话最好使用小写!

        '#'

        井号将发送一个 Windows 徽标键,因此语句 Send("#r") 将发送 Win+r,这将打开“运行”对话框.

        您可以通过设置 SendCapslockMode 从而在 Send 函数开始操作前关闭大小写切换键(大写锁,CAPS LOCK)并在完成操作后恢复.
        但是,如果在 Send 函数开始执行的时候用户就按住 Shift 键,那么发送的文本可能会是小写字符.
        一个解决办法是在每次执行其它 Send 操作前使用语句 Send("{SHIFTDOWN}{SHIFTUP}").

        某些键盘(如捷克语)发送按下SHIFT键时或者CAP LOCK(大写锁定)开启时发送不同的字符(大小写时)可能不工作.

        因为AUTOIT在 CAPS LOCK(大写锁定)开启时发送小写字符得到的却是大写(这是常识):

        Windows 不允许模拟 "CTRL-ALT-DEL" 组合键

        [Send 命令(无标志参数)]                    [键击结果]

        {!}                                         !

        {#}                                         #

        {+}                                         +

        {^}                                         ^

        {{}                                         {

        {}}                                         }

        {SPACE}                                     空格

        {ENTER}                                     主键盘区的 回车键

        {ALT}                                       ALT

        {BACKSPACE} / {BS}                          退格

        {DELETE} / {DEL}                            删除

        {UP}                                        向上箭头

        {DOWN}                                      向下箭头

        {LEFT}                                      向左箭头

        {RIGHT}                                     向右箭头

        {HOME}                                      HOME

        {END}                                       END

        {ESCAPE} / {ESC}                            ESC键

        {INSERT} / {INS}                            INS

        {PGUP}                                      PageUp

        {PGDN}                                      PageDown

        {F1} - {F12}                                功能键

        {TAB}                                       TAB

        {PRINTSCREEN}                               Print Screen 键

        {LWIN}                                      左徽标键

        {RWIN}                                      右徽标键

        {NUMLOCK on}                                NUMLOCK (on/off/toggle)

        {CAPSLOCK off}                              CAPSLOCK (on/off/toggle)

        {SCROLLLOCK toggle}                         SCROLLLOCK (on/off/toggle)

        {BREAK}                                     Ctrl+Break

        {PAUSE}                                     PAUSE

        {NUMPAD0} - {NUMPAD9}                       数字键盘上的 数字键

        {NUMPADMULT}                                数字键盘上的 乘号

        {NUMPADADD}                                 数字键盘上的 加号

        {NUMPADSUB}                                 数字键盘上的 减号

        {NUMPADDIV}                                 数字键盘上的 除号

        {NUMPADDOT}                                 数字键盘上的 点号

        {NUMPADENTER}                               数字键盘上的 回车键

        {APPSKEY}                                   Windows 应用程序键

        {LALT}                                      左 ALT 键

        {RALT}                                      右 ALT 键

        {LCTRL}                                     右 CTRL 键

        {RCTRL}                                     右 CTRL 键

        {LSHIFT}                                    左 Shift 键

        {RSHIFT}                                    右 Shift 键

        {SLEEP}                                     系统休眠（SLEEP）键

        {ALTDOWN}                                   按住 ALT 键直到发送 {ALTUP} 为止

        {SHIFTDOWN}                                 按住 SHIFT 键直到发送 {SHIFTUP} 为止

        {CTRLDOWN}                                  按住 CTRL 键直到发送 {CTRLUP} 为止

        {LWINDOWN}                                  按住左徽标键直到发送 {LWINUP} 为止

        {RWINDOWN}                                  按住右徽标键直到发送 {RWINUP} 为止

        {ASC nnnn}                                  发送 ALT+nnnn 组合键

        {BROWSER_BACK}                              仅支持2000/XP:按下浏览器中的"后退"按钮

        {BROWSER_FORWARD}                           仅支持2000/XP:按下浏览器中的"前进"按钮

        {BROWSER_REFRESH}                           仅支持2000/XP:按下浏览器中的"刷新"按钮

        {BROWSER_STOP}                              仅支持2000/XP:按下浏览器中的"停止"按钮

        {BROWSER_SEARCH}                            仅支持2000/XP:按下浏览器中的"搜索"按钮

        {BROWSER_FAVORITES}                         仅支持2000/XP:按下浏览器中的"收藏夹"按钮

        {BROWSER_HOME}                              仅支持2000/XP:运行浏览器并转到主页

        {VOLUME_MUTE}                               仅支持2000/XP:切换系统静音状态

        {VOLUME_DOWN}                               仅支持2000/XP:减小系统音量

        {VOLUME_UP}                                 仅支持2000/XP:增大系统音量

        {MEDIA_NEXT}                                仅支持2000/XP:在播放器中选择播放下一个轨道（影音媒体）

        {MEDIA_PREV}                                仅支持2000/XP:在播放器中选择播放上一个轨道

        {MEDIA_STOP}                                仅支持2000/XP:使播放器停止播放

        {MEDIA_PLAY_PAUSE}                          仅支持2000/XP:使播放器播放/暂停

        {LAUNCH_MAIL}                               仅支持2000/XP:运行邮件客户端程序

        {LAUNCH_MEDIA}                              仅支持2000/XP:运行媒体播放器

        {LAUNCH_APP1}                               仅支持2000/XP:运行用户程序1

        {LAUNCH_APP2}                               仅支持2000/XP:运行用户程序2

        如果要发送 ASCII 字符 A 则参考下例(相当于 ALT+065,按住ALT键并在数字键盘上顺序按下065)

            Send("{ASC 065}")

        (在使用两位数的 ASCII 码时必须在前面加一个 0,否则将使用 437号代码页).

        如果要发送 UNICODE 字符则输入该字符代码,例如下例将发送一个中文字符

            Send("{ASC 2709}") or Send("{ASC 0xA95}")

        可参考下例重复发送某按键.

            Send("{DEL 4}") ;连续4次按下 DEL 键

            Send("{S 30}") ;发送30个字符"S"

            Send("+{TAB 4}") ;连续4次按下 SHIFT+TAB

        The key will be send at least once even if the count is zero.

        如果要按住(保持按下状态)某个按键

            Send("{a down}") ;按住按键 A

            Send("{a up}") ;松开按键 A

        如果要改变 capslock,numlock 和 scrolllock 键的状态,可参考下例:

            Send("{NumLock on}") ;打开 NumLock

            Send("{CapsLock off}") ;关闭 CapsLock

            Send("{ScrollLock toggle}") ;切换 ScrollLock 的状态


        如果要用变量来指定重复发送的次数,参考下例:

            $n = 4

            Send("+{TAB " & $n & "}")

        如果要用变量来指定要重复发送的 ASCII 字符(比如 A),参考下例:

            $x = Chr(65)

            Send("{" & $x & " 4}")

        大多数笔记本电脑的键盘上都会有一个特殊的 Fn 键,此键无法被模拟.

        若把标志参数的值设为1则"按键"参数将被原样发送.如果某些文本是从变量里拷贝而来,而您又希望完全按原样发送这些文本的话,就应该使用这一设置.

        例如,先打开 文件夹选项窗口(位于控制面板),然后请尝试执行下面这些语句:

        Send("{TAB}") 切换到(焦点切换)下一个控件(按钮、复选框等)

        Send("+{TAB}") 切换到上一个控件.

        Send("^{TAB}") 切换到下一个窗口标签

        Send("^+{TAB}") 切换到上一个窗口标签.

        Send("{SPACE}") 可用来切换复选框的选中状态或点击某个按钮.

        Send("{+}") 通常用来选中某个复选框(如果它"确实是"复选框的话)

        Send("{-}") 通常用来取消选中某个复选框.

        Send("{NumPadMult}") 完全展开 SysTreeView32 控件内显示的文件夹.

        组合 Alt 键使用可访问菜单项,请打开记事本窗口然后尝试执行下面这些语句:

        Send("!f") 表示发送 Alt+f,这是打开记事本的文件菜单的快捷键,您还可以试试其它的!

        Send("{DOWN}") 移动焦点到下一个菜单项.

        Send("{UP}") 移动焦点到上一个菜单项.

        Send("{LEFT}") 切换到左边的菜单或收缩子菜单.

        Send("{RIGHT}") 切换到右边的菜单或展开子菜单.

        如果您对快捷键(Alt+F4,PrintScreen,Ctrl+C等等)的重要性还不太了解,请查看 Windows 的帮助信息(按下热键 Win+F1 即可) 以获得关于快捷键的完整列表.

        When running a script on a remote computer through a program as psexec (www.sysinternals.com) or beyondexec (www.beyondlogic.org) it is necessary, specially when sending strokes to a program launch by the script with a Run function, to use ControlSend or other ControlXXX functions to directly communicate with the control. Send even with Opt("SendAttachMode",1) is not working.
        Using the -s mode when submitting can help to have better right on the remote computer.

        Opt("SendKeyDelay",...) 修改发送按钮的延迟时间(两次按键之间).

        Opt("SendKeyDownDelay",...) 修改按钮按下延迟时间(从释放按键结束).

        设置 "SendKeyDelay" 和 "SendKeyDownDelay" 都为0将移除所有按键延迟. This may be required under certain circumstances, for example, when locking the system ("#l") it may be necessary to remove the delays in order to prevent the WIN key from being stuck down.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        SendKeep Active, Control Send, Block Input, Hot Key Set, Win Menu Select Item

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        send("#r")

        win_wait_active("运行")

        send("notepad.exe{Enter}")

        win_wait_active("[CLASS:Notepad]")

        send("Today's time/date is {F5}")

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.send(send_text, mode)

    def shutdown(self, code):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        关机.

        Shutdown ( 代码 )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        code(代码)             shutdown 命令的各种代码的组合值. 参考注意事项.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值 1.

        失败: 返回值 0 并按照 GetLastError() 的值设置 @error.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        关机代码可以是下面的值:

        0 = Logoff(注销)

        1 = Shutdown(关闭计算机)

        2 = Reboot(重启)

        4 = Force(强制执行)

        8 = Power down(关闭计算机,如果支持电源管理特性,也将关闭电源)

        16= Force if hung(强制挂起)

        32= Standby(待机)

        64= Hibernate(休眠)

        可按需把相应数值相加.比如,要关机并断电,则应指定数值 9 (shutdown + power down = 1 + 8 = 9).

        若设置了其它代码则待机或休眠将被忽略.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Process Close

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        shutdown(6)  #强制重启

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.shutdown(code)

    def statusbar_get_text(self, title, text="", part=1, buf_size=256):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        获取标准状态栏控件的文本.

        Statusbar Get Text ( "窗口标题" [, text="窗口文本" [, 部分 [,buf_size=256]]] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)                 目标窗口标题,可以是title/class.

        text(窗口文本)                 [可选参数] 目标窗口文本.

        part(部分)                     [可选参数] 要读取的状态栏的文本"部分",默认值为 1. 1 表示状态栏上的(左边)第一个可能的分区文本,通常包含最有用的信息(比如"准备","载入中..."等等).

        buf_size (缓冲区大小)      [可选参数] 默认值为256.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回获得的文本.

        失败: 返回一个空字符串并把 @error 设为 1 说明无法读取文本.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        本函数执行时将尝试读取目标窗口的第一个标准状态栏(Microsoft 通用控件: msctls_statusbar32)的文本.某些程序使用了它们自己的状态栏或者MS通用控件的特殊版本,StatusbarGetText 就无法读取这些状态栏.例如,StatusbarText 就不能获取 TextPad 的状态栏信息.不过,TextPad 的状态栏的第一个区域的文本可通过使用 ControlGetText("TextPad", "", "HSStatusBar1") 来获取
        StatusbarGetText 能在目标窗口最小化甚至隐藏的情况下正常工作.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Control Get Text, Control Command

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        auto_it_set_option("WinTitleMatchMode", 2)

        x = statusbar_get_text("Internet Explorer")

        print("Internet Explorer's status bar says:", x)

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.statusbar_get_text(title, text, part, buf_size)

    def statusbar_get_text_by_handle(self, hwnd, part=1, buf_size=256):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，获取标准状态栏控件的文本.

        Statusbar Get Text By Handle ( "窗口句柄" [, 部分 [,buf_size=256]] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        hwnd(窗口句柄)                 目标窗口句柄.

        part(部分)                     [可选参数] 要读取的状态栏的文本"部分",默认值为 1. 1 表示状态栏上的(左边)第一个可能的分区文本,通常包含最有用的信息(比如"准备","载入中..."等等).

        buf_size (缓冲区大小)      [可选参数] 默认值为256.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回获得的文本.

        失败: 返回一个空字符串并把 @error 设为 1 说明无法读取文本.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Statusbar Get Text
        """
        return autoit.statusbar_get_text_by_handle(hwnd, part, buf_size)

    def tooltip(self, tip, x=INTDEFAULT, y=INTDEFAULT):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        在屏幕的任意位置显示一个工具提示.

        ToolTip ( "文本" [, X坐标 [, Y坐标]] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        tip(文本)             工具提示的文本(如果是空字符串则清除现有的工具提示).

        X坐标                 [可选参数] 工具提示出现位置的 X 坐标.

        Y坐标                 [可选参数] 工具提示出现位置的 Y 坐标.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1.

        失败: 返回 0 ,当标题长度大于 99.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        要跳过可选参数设置,请使用 Default 关键字.

        如果X,Y坐标没有设置,提示将显示于鼠标的坐标.
        工具提示不能出现于脚本终止或者 ToolTip("") 以后.
        你可以使用 @CR 或者 @LF 来创建多行的工具提示.
        要显示一个图标, 您必须设置一个非空标题. 要使图标和标题在同一行,则必须使用一个标题.
        如果使用居中标志, 工具提示会根据指定的坐标的相对位置进行显示.如果在气泡提示上使用居中标志,将会指向指定坐标点.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        TrayTip, MsgBox, SplashTextOn

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        import time

        # 创建并显示工具提示(tooltip)在屏幕的左上方

        tool_tip("这是一个工具提示", 0, 0)

        time.sleep(2)  # 等待两秒让工具提示(tooltip)显示

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.tooltip(tip, x, y)

    def win_activate(self, title, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        激活指定的窗口(设置焦点到该窗口,使其成为活动窗口).

        Win Activate ( "窗口标题" [, text="窗口文本"] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)         要激活的窗口标题,可以是title/class. 参考 标题特殊定义.

        text(窗口文本)         [可选参数] 要激活的窗口包含的文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 窗口句柄.

        失败: 返回 0 (如果没有找到指定窗口).

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        您可以使用 WinActive 函数来检查 WinActivate 是否成功,若同时有多个窗口符合匹配条件则程序将激活最近被激活的窗口,WinActivate 在窗口最小化的情况下仍能正常工作.但是,"最顶层"窗口仍将覆盖在被激活窗口之上.

        @extended 包含一个扩展信息,指明是否成功完成激活.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Close, Win Set State, Win Kill, Win Move

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        import time

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        send("!{tab}")

        time.sleep(1)

        win_activate("[CLASS:Notepad]", "")

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_activate(title, text=_text)

    def win_activate_by_handle(self, handle):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，激活指定的窗口(设置焦点到该窗口,使其成为活动窗口).

        Win Activate By Handle ( "窗口句柄")

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)         要激活的窗口句柄. 参考 标题特殊定义.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 窗口句柄.

        失败: 返回 0 (如果没有找到指定窗口).

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Activate
        """
        return autoit.win_activate_by_handle(handle)

    def win_active(self, title, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        检查指定的窗口是否存在且当前被激活.

        Win Active ( "窗口标题" [, text="窗口文本"] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)       要检查的目标窗口标题,可以是title/class. 参考 标题特殊定义.

        text(窗口文本)        [可选参数] 目标窗口文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 如果窗口当前为活动状态.返回窗口句柄.

        失败: 返回值为 0,说明目标窗口不是激活状态.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        None.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Exists, Win Wait, Win Wait Active, Win Wait Close, Win Wait Not Active

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        import time

        run("notepad.exe")

        time.sleep(1)

        if win_active("[CLASS:Notepad]"):

            print("记事本窗口是活动的")

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_active(title, text=_text)

    def win_active_by_handle(self, handle):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，检查指定的窗口是否存在且当前被激活.

        Win Active By Handle ( "窗口句柄" )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)       要检查的目标窗口句柄. 参考 标题特殊定义.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 如果窗口当前为活动状态.返回窗口句柄.

        失败: 返回值为 0,说明目标窗口不是激活状态.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Active
        """
        return autoit.win_active_by_handle(handle)

    def win_close(self, title, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        关闭指定窗口.

        Win Close ( "窗口标题" [, text="窗口文本"] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)             要关闭的窗口标题,可以是title/class. 参考 标题特殊定义.

        text(窗口文本)             [可选参数] 要关闭的窗口包含的文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1.

        失败: 返回 0. (如果没有找到指定窗口).

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        本函数将发送一个关闭消息到目标窗口,效果因窗口不同而不同(它可能会询问是否保存数据,等等).若要强制性关闭目标窗口,请使用 WinKill 函数.若同时有多个窗口符合匹配条件则程序将关闭最近被激活的窗口.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Activate, Win Exists, Win Kill, Win Set State, Process Close, Win Move

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        import time

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        control_send("[CLASS:Notepad]","[CLASSNN:Edit1]","text")

        time.sleep(0.5)

        win_close("[CLASS:Notepad]")

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_close(title, text=_text)

    def win_close_by_handle(self, handle):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，关闭指定窗口.

        Win Close By Handle ( "窗口句柄" )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)             要关闭的窗口句柄. 参考 标题特殊定义.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1.

        失败: 返回 0. (如果没有找到指定窗口).

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Close
        """
        return autoit.win_close_by_handle(handle)

    def win_exists(self, title, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        检查指定的窗口是否存在.

        Win Exists ( "窗口标题" [, text="窗口文本"] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)          目标窗口标题,可以是title/class. 参考 标题特殊定义.

        text=(窗口文本)          [可选参数] 要检查的窗口所包含的文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1,窗口存在.

        失败: 返回 0,窗口不存在.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        即使目标窗口处于隐藏状态,WinExist 仍将返回 1.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Active, Win Wait, Win Wait Active, Win Wait Close, Win Wait Not Active, Process Exists, Win Close

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        if win_exists("[CLASS:Notepad]"):

            print("记事本窗口存在")

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_exists(title, text=_text)

    def win_exists_by_handle(self, handle):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，检查指定的窗口是否存在.

        Win Exists By Handle ( "窗口句柄" )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)          目标窗口句柄. 参考 标题特殊定义.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1,窗口存在.

        失败: 返回 0,窗口不存在.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Exists
        """
        return autoit.win_exists_by_handle(handle)

    def win_get_caret_pos(self):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        返回顶层窗口的插入符的坐标位置.

        Win Get Caret Pos ( )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        None.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回一个含有下列信息的2元素数组:

         $array[0] = X 坐标

         $array[1] = Y 坐标

        失败: 把 @error 设为 1.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        若设置了 CaretCoordMode 使用绝对位置则 WinGetCaretPos 对那些具有多文档界面(MDI)的应用程序获得的坐标值可能是不准确的.请参考下面的示例.注意:有些程序可能会无论光标实际位置在哪都只会返回某固定数值!

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        CaretCoordMode (Option)

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        import time

        # 得到 MDI 文本编辑器的一些可靠方法.

        def CaretPos():

            x_adjust = 5

            y_adjust = 40

            opt("CaretCoordMode", 0)              #相对模式

            c = win_get_caret_pos()           #相对插入符坐标

            w = win_get_pos("")              #窗口坐标

            f = control_get_focus("","")     #文本区域 "句柄"

            e = control_get_pos("", "", $f)  #文本区域坐标

            t[2]

            if len(c) > 1 and len(w) > 1 and len(e) > 1:

                t[0] = c[0] + w[0] + e[0] + x_adjust

                t[1] = c[1] + w[1] + e[1] + y_adjust

                return t     #当前光标的绝对屏幕坐标

            else:

                print("some error")

        a = win_get_caret_pos()

        if not error():

            tool_tip("第一个插入符坐标", a[0], a[1])

            mouse_move(a[0],a[1])

        time.sleep(2)

        b = caret_pos()

        if not error():

            tool_tip("第二个插入符坐标", b[0], b[1])

            mouse_move(b[0],b[1])

        time.sleep(2)

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.win_get_caret_pos()

    def win_get_class_list(self, title, buf_size=200, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        获取指定窗口的所有控件类的列表.

        Win Get Class List ( "窗口标题" [, buf_size=200 [, text="窗口文本"]] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)                    目标窗口标题,可以是title/class. See 标题特殊定义.

        buf_size (缓冲区大小)              [可选参数] 默认值为200.

        text(窗口文本)                     [可选参数] 目标窗口文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回一个含有所有控件类的字符串.

        失败: 返回值为"",并把 @error 设为 1,说明不存在符合匹配要求的窗口.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        类别名由换行符(@LF)分开.在目标窗口处于最小化或隐藏状态时 WinGetClassList 仍能正常工作.最多能获得 64KB 的文本内容.若同时有多个窗口符合匹配条件则程序将读取最近被激活的窗口的控件类.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Get Text, Control Command

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        text = win_get_class_list("[CLASS:Notepad]")

        print("类列表为:", text)

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_get_class_list(title, buf_size, text=_text)

    def win_get_class_list_by_handle(self, handle, buf_size=200):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，获取指定窗口的所有控件类的列表.

        Win Get Class List By Handle ( "窗口句柄" [, buf_size=200] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)                    目标窗口句柄. See 标题特殊定义.

        buf_size (缓冲区大小)              [可选参数] 默认值为200.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回一个含有所有控件类的字符串.

        失败: 返回值为"",并把 @error 设为 1,说明不存在符合匹配要求的窗口.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Get Class List
        """
        return autoit.win_get_class_list_by_handle(handle, buf_size)

    def win_get_client_size(self, title, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        获取指定窗口的客户区的大小信息.

        Win Get Client Size ( "窗口标题" [, text="窗口文本"] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)          目标窗口标题,可以是title/class. See 标题特殊定义.

        text(窗口文本)           [可选参数] 目标窗口文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回一个含有下列信息的2元素数组:

         $array[0] = 目标窗口客户区的宽度

         $array[1] = 目标窗口客户区的高度

        失败: 返回值为0,并把 @error 设为1,说明未找到目标窗口.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        若目标窗口被最小化,则返回的宽度和高度都是零.但是,即使目标窗口处于(非最小化)隐藏状态 WinGetClientSize 仍能正常工作.若窗口标题是"Program Manager"则本函数将返回桌面的大小.WinGetClientSize("") 则表示目标窗口是当前激活窗口.若同时有多个窗口符合匹配条件则程序将获取最近被激活的窗口的大小.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Get Pos, Win Move

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        size = win_get_client_size("[active]")

        print("活动窗口客户端大小 (宽度,高度):", size[0] + "," + size[1])

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_get_client_size(title, text=_text)

    def win_get_client_size_by_handle(self, handle):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，获取指定窗口的客户区的大小信息.

        Win Get Client Size By Handle ( "窗口句柄" )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)          目标窗口句柄.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回一个含有下列信息的2元素数组:

         $array[0] = 目标窗口客户区的宽度

         $array[1] = 目标窗口客户区的高度

        失败: 返回值为0,并把 @error 设为1,说明未找到目标窗口.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Get Client Size
        """
        return autoit.win_get_client_size_by_handle(handle)

    def win_get_handle(self, title, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        获取指定窗口的内部句柄.

        Win Get Handle ( "窗口标题" [, text="窗口文本"] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)              目标窗口标题,可以是title/class. 参考标题特殊定义

        text(窗口文本)               [可选参数] 目标窗口文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回一个含有目标窗口句柄.

        失败: 返回0,并把 @error 设为 1,说明不存在符合匹配要求的窗口.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        具体示例请参考Win Get Handle As Text

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Get Handle As Text

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_get_handle(title, text=_text)

    def win_get_handle_as_text(self, title, buf_size=16, **kwargs):
        """
         -----------------------------------------------------------------------------------------------------------------

         [描述]

         获取指定窗口的内部句柄，返回的句柄值是字符串.

         Win Get Handle As Text ( "窗口标题" [, buf_size=16 [, text="窗口文本"] )

         -----------------------------------------------------------------------------------------------------------------

         [参数]

         title(窗口标题)                 目标窗口标题,可以是title/class. 参考标题特殊定义

         buf_size (缓冲区大小)           [可选参数] 默认值为16.

         text(窗口文本)                   [可选参数] 目标窗口文本.

         -----------------------------------------------------------------------------------------------------------------

         [返回值]

         成功: 返回一个含有目标窗口句柄的字符串.

         失败: 返回一个""(空字符串),并把 @error 设为 1,说明不存在符合匹配要求的窗口.

         -----------------------------------------------------------------------------------------------------------------

         [注意/说明]

         这个函数允许你使用"窗口标题"和"窗口文本"得到窗口的句柄.

         一旦您成功取得了窗口句柄,即使以后窗口标题发生了变化,还是可以使用这个句柄来进行窗口操作.

         -----------------------------------------------------------------------------------------------------------------

         [相关]

         Win Set Title, GUICreate, Win List

         -----------------------------------------------------------------------------------------------------------------

         [示例/演示]

         # -*- coding: utf-8 -*-

         from AutoItV3Library import *

         run("notepad.exe")

         win_wait_active("[CLASS:Notepad]")

         control_set_text("[CLASS:Notepad]", "[CLASSNN:Edit1]","this one")

         auto_it_set_option("WinTitleMatchMode", 4)

         # 得到包括 "this one" 内容的记事本窗口的句柄

         handle = win_get_handle("[CLASS:Notepad]", "this one")

         if error():

             print("错误", "不能找到指定窗口")

         else:

             # 发送一些文本到记事本窗口编辑控件.

             control_send(handle, "Edit1", "AbCdE")

         -----------------------------------------------------------------------------------------------------------------
         """
        _text = kwargs.get("text", "")

        return autoit.win_get_handle_as_text(title, buf_size, text=_text)

    def win_get_pos(self, title, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        获取指定窗口的坐标位置和大小等属性.

        Win Get Pos ( "窗口标题" [, text="窗口文本"] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)           目标窗口标题,可以是title/class. 参考标题高级定义.

        text(窗口文本)            [可选参数] 指定窗口包含的文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回一个含有下列信息的4维数组:

         $array[0] = X 坐标

         $array[1] = Y 坐标

         $array[2] = 宽度

         $array[3] = 高度

        失败: 返回值为1,并把 @error 设为 1,说明未找到目标窗口.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        若目标窗口被最小化则 WinGetPos 的返回值将是负数(比如 -32000),但对(非最小化的)隐藏窗口则可正常工作.

        若窗口标题是"Program Manager"则本函数将返回桌面的大小.若同时有多个窗口符合匹配条件则程序将获取最近被激活的窗口的大小.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Get Client Size, Win Move, Win Get State

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        size = win_get_pos("[active]")

        print("活动窗口状态 (X坐标,Y坐标,宽度,高度):", size[0] + ",    " + size[1]  ",   " + size[2] + ",   " + size[3])

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_get_pos(title, text=_text)

    def win_get_pos_by_handle(self, handle):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，获取指定窗口的坐标位置和大小等属性.

        Win Get Pos By Handle ( "窗口句柄" )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)           目标窗口句柄. 参考标题高级定义.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回一个含有下列信息的4维数组:

         $array[0] = X 坐标

         $array[1] = Y 坐标

         $array[2] = 宽度

         $array[3] = 高度

        失败: 返回值为1,并把 @error 设为 1,说明未找到目标窗口.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Get Pos
        """
        return autoit.win_get_pos_by_handle(handle)

    def win_get_process(self, title, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        获取指定窗口关联的进程ID(PID).

        Win Get Process ( "窗口标题" [, text="窗口文本"] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)        要读取的窗口标题,可以是title/class.参考 标题特殊定义.

        text(窗口文本)         [可选参数] 要读取的窗口包含的文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回数值型进程ID(PID).

        失败: 返回值为 -1.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        None.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Process Wait, Process Wait Close, Process List

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        win_wait("[CLASS:Notepad]")

        pid = win_get_process("[CLASS:Notepad]")

        print("进程 PID 为", pid)

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_get_process(title, text=_text)

    def win_get_process_by_handle(self, handle):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，获取指定窗口关联的进程ID(PID).

        Win Get Process By Handle ( "窗口句柄" )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)        要读取的窗口句柄.参考 标题特殊定义.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回数值型进程ID(PID).

        失败: 返回值为 -1.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Get Process
        """
        return autoit.win_get_process_by_handle(handle)

    def win_get_state(self, title, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        获取指定窗口的状态.

        Win Get State ( "窗口标题" [, text="窗口文本"] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)        目标窗口标题,可以是title/class.参考标题特殊定义

        text(窗口文本)         [可选参数] 指定窗口包含的文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回一个指示窗口状态的值.多个状态值被加到一起,因此要检查该窗口是否具有指定状态请使用 BitAND() 函数:

         1 = 窗口存在

         2 = 窗口可见

         4 = 窗口可用(未被禁用)

         8 = 窗口为激活状态

         16 = 窗口为最小化状态

         32 = 窗口为最大化状态

        失败: 返回值为0,并把 @error 设为 1,说明未找到目标窗口.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        None.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        BitAND, Win Get Pos

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        win_set_state("[CLASS:Notepad]", 3)

        # 检查记事本窗口状态

        state = win_get_state("[CLASS:Notepad]")

        # 检查记事本窗口是不是"最小化"状态.

        if state == 16:

            print("例子", "记事本窗口是最小化的")

        else:
            print("例子", "记事本窗口不是最小化的")

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_get_state(title, text=_text)

    def win_get_state_by_handle(self, handle):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，获取指定窗口的状态.

        Win Get State By Handle ( "窗口句柄" )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)        目标窗口句柄.参考标题特殊定义

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回一个指示窗口状态的值.多个状态值被加到一起,因此要检查该窗口是否具有指定状态请使用 BitAND() 函数:

         1 = 窗口存在

         2 = 窗口可见

         4 = 窗口可用(未被禁用)

         8 = 窗口为激活状态

         16 = 窗口为最小化状态

         32 = 窗口为最大化状态

        失败: 返回值为0,并把 @error 设为 1,说明未找到目标窗口.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Get State
        """
        return autoit.win_get_state_by_handle(handle)

    def win_get_text(self, title, buf_size=256, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        获取指定窗口中的文本.

        Win Get Text ( "窗口标题" [, buf_size=256 [, text="窗口文本"]] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)                   目标窗口标题,可以是title/class.参考标题特殊定义

        buf_size (缓冲区大小)            [可选参数] 默认值为256.

        text(窗口文本)                   [可选参数] 指定窗口包含的文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回指定窗口里面包含的文本.

        失败: 返回0(如果没有匹配的标题).

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        本函数最多能获得 64KB 的窗口文本.即使目标窗口被最小化 WinGetText 仍能正常工作,若要获得隐藏窗口的文本请先设置;AutoItSetOption("WinDetectHiddenText", 1)
        若同时有多个窗口符合匹配条件则程序将获取最近被激活的窗口的文本.

        使用 WinGetText("[active]") 可获得当前激活窗口的文本.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Get Title, Control Get Text, Win Get Class List

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        import time,random

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        control_set_text("[CLASS:Notepad]", "[CLASSNN:Edit1]", random.random(0,1000))

        time.sleep(0.5)

        ext = win_get_text("[CLASS:Notepad]")

        print("读取的文本为:","读取到的文本为: " + text)

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_get_text(title, buf_size, text=_text)

    def win_get_text_by_handle(self, handle, buf_size=256):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，获取指定窗口中的文本.

        Win Get Text By Handle ( "窗口句柄" [, buf_size=256] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)                   目标窗口句柄.参考标题特殊定义

        buf_size (缓冲区大小)            [可选参数] 默认值为256.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回指定窗口里面包含的文本.

        失败: 返回0(如果没有匹配的标题).

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Get Text
        """
        return autoit.win_get_text_by_handle(handle, buf_size)

    def win_get_title(self, title, buf_size=256, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        获取指定窗口的完整标题名.

        Win Get Title ( "窗口标题" [, buf_size=256 [, text="窗口文本"] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)                    目标窗口标题,可以是title/class.参考标题特殊定义.

        buf_size (缓冲区大小)             [可选参数] 默认值为256.

        text(窗口文本)                    [可选参数] 指定窗口包含的文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回指定窗口的完整标题字符串.

        失败: 返回 0 (如果没有匹配的标题).

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        Win Get Title("[active]") 将返回当前激活窗口的标题.Win Get Title 能对最小化窗口或隐藏窗口正常工作.若同时有多个窗口符合匹配条件则程序将获取最近被激活的窗口的标题.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        AutoItWinGetTitle, Win Get Text, Win Set Title

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        title = win_get_title("[CLASS:Notepad]")

        print("完整的标题为:", title)

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_get_title(title, buf_size, text=_text)

    def win_get_title_by_handle(self, handle, buf_size=256):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，获取指定窗口的完整标题名.

        Win Get Title By Handle ( "窗口句柄" [, buf_size=256 [, text="窗口文本"] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)                    目标窗口句柄.参考标题特殊定义.

        buf_size (缓冲区大小)             [可选参数] 默认值为256.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回指定窗口的完整标题字符串.

        失败: 返回 0 (如果没有匹配的标题).

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Get Title
        """
        return autoit.win_get_title_by_handle(handle, buf_size)

    def win_kill(self, title, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        强行关闭指定窗口.

        Win Kill ( "窗口标题" [, text="窗口文本"] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title（窗口标题）                 目标窗口标题,可以是title/class.参考标题高级定义.

        text（窗口文本）                 [可选参数] 指定需要关闭的窗口包含的文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        无(无论成功与否总是返回1)

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        本函数和 Win Close 的不同之处在于 Win Kill 在目标窗口未能被迅速关闭时强制性地终止该窗口.因此,用户将没有机会对原本可能会出现的对话框(提示用户保存数据)作出反应.尽管 WinKill 能对最小化窗口或隐藏窗口正常工作,但某些窗口(特别是资源管理器窗口)只能使用 Win Close 来关闭.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Activate, Win Close, Win Set State, Process Close

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        import time

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        time.sleep(1)

        win_kill("[CLASS:Notepad]")

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_kill(title, text=_text)

    def win_kill_by_handle(self, handle):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，强行关闭指定窗口.

        Win Kill By Handle ( "窗口句柄" )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle（窗口句柄）           目标窗口句柄.参考标题高级定义.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        无(无论成功与否总是返回1)

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Kill
        """
        return autoit.win_kill_by_handle(handle)

    def win_menu_select_item(self, title, *items, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        调用窗口中的某个菜单项目.

        Win Menu Select Item ( "窗口标题" [, "菜单项" [, "菜单项" [, "菜单项" [, "菜单项" [, "菜单项" [, "菜单项" [, "菜单项" [, text="窗口文本"]]]]]]] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)         目标窗口标题,可以是title/class.参考标题特殊定义.

        *items(菜单项)         [可选参数]菜单项目的文本.

        *items(菜单项)         [可选参数] 子菜单项目的文本.

        *items(菜单项)         [可选参数] 子菜单项目的文本.

        *items(菜单项)         [可选参数] 子菜单项目的文本.

        *items(菜单项)         [可选参数] 子菜单项目的文本.

        *items(菜单项)         [可选参数] 子菜单项目的文本.

        *items(菜单项)         [可选参数] 子菜单项目的文本.

        text(窗口文本)         [可选参数] 目标窗口文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为1.

        失败: 返回值为0,说明未发现目标菜单项.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        注意,含有下划线的菜单项实际上是由一个 & 符号来指示下划线的位置的.因此,菜单项 File 或 文件( F ) 的对应文本应该是 "&File" 或 "文件(&F)", Convert 的对应文本则是 "Con&vert".您可以访问最深达六层菜单项;而且不用管目标窗口是否被激活/最小化/隐藏.

        WinMenuSelectItem 只能对标准菜单有效.不幸的是,目前有很多的菜单实际上都是程序员自己写的或者是用工具栏来"假装"成菜单的.即使是 Microsoft 的应用程序也有很多这样的.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Control Command, Send

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        # 将会选择记事本的>文本>页面设置菜单

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        win_menu_select_item("[CLASS:Notepad]", "文件(&F)", "页面设置(&U)..." )

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_menu_select_item(title, *items, text=_text)

    def win_menu_select_item_by_handle(self, handle, *items):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，调用窗口中的某个菜单项目.

        Win Menu Select Item By Handle ( "窗口句柄" [, "菜单项" [, "菜单项" [, "菜单项" [, "菜单项" [, "菜单项" [, "菜单项" [, "菜单项"]]]]]] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)         目标窗口句柄.参考标题特殊定义.

        *items(菜单项)         [可选参数]菜单项目的文本.

        *items(菜单项)         [可选参数] 子菜单项目的文本.

        *items(菜单项)         [可选参数] 子菜单项目的文本.

        *items(菜单项)         [可选参数] 子菜单项目的文本.

        *items(菜单项)         [可选参数] 子菜单项目的文本.

        *items(菜单项)         [可选参数] 子菜单项目的文本.

        *items(菜单项)         [可选参数] 子菜单项目的文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为1.

        失败: 返回值为0,说明未发现目标菜单项.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Menu Select Item
        """
        return autoit.win_menu_select_item_by_handle(handle, *items)

    def win_minimize_all(self):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        最小化全部窗口.

        Win Minimize All ( )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        None.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        None.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        Send("#m") 也是一种可行办法.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Minimize All Undo, Win Set State

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        win_minimize_all()

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.win_minimize_all()

    def win_minimize_all_undo(self):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        撤销此前的 WinMinimizeAll 的效果.

        Win Minimize All Undo ( )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        None.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        None.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        Send("#+m") 也是一种可行办法.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        WinMinimizeAll, WinSetState

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        win_minimize_all_undo()

        -----------------------------------------------------------------------------------------------------------------
        """
        return autoit.win_minimize_all_undo()

    def win_move(self, title, x, y, width=-1, height=-1, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        移动指定的窗口或调整窗口的大小.

        Win Move ( "窗口标题", X坐标, Y坐标 [, 宽度 [, 高度 [, text="窗口文本"]]] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)      需要移动/重新设置大小的目标窗口标题,可以是title/class. 请参考标题特殊定义.

        X坐标               要移动到的新 X 坐标.

        Y坐标               要移动到的新 Y 坐标.

        width(宽度)        [可选参数] 窗口的新宽度.

        height(高度)       [可选参数] 窗口的新高度.

        text(窗口文本)      [可选参数]目标窗口文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 窗口的句柄.

        失败: 返回 0 (如果窗体不存在.)

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        Win Move 对最小化窗口无效,但能对隐藏窗口正常工作.

        若指定的宽度和高度过小(或者是负数)则窗口大小将不会小于 112 x 27(象素).若宽度和高度过大则窗口大小将不会大于 [12+@DesktopWidth] x [12+@DesktopHeight](象素,约值).
        X坐标 和 Y 坐标可使用负数.事实上,您甚至可以把窗口移出屏幕;若该程序具有"记住上次位置"功能则下一次您运行该程序时窗口将在屏幕一角出现(并且是完全显示).

        若同时有多个窗口符合匹配条件则程序将移动最近被激活的窗口.

        如果X坐标和Y坐标使用 Default 关键字 那么窗口不会移动,但是会修改窗口的尺寸.

        那时速度用于直到改变窗口大小完成.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Activate, Win Close, Win Get Client Size, Win Get Pos, Win Set State

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        win_move("[CLASS:Notepad]", 0, 0, 200, 200)

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_move(title, x, y, width, height, text=_text)

    def win_move_by_handle(self, handle, x, y, width=-1, height=-1):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，移动指定的窗口或调整窗口的大小.

        Win Move By Handle ( "窗口句柄", X坐标, Y坐标 [, 宽度 [, 高度]] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)      需要移动/重新设置大小的目标窗口句柄. 请参考标题特殊定义.

        X坐标               要移动到的新 X 坐标.

        Y坐标               要移动到的新 Y 坐标.

        width(宽度)        [可选参数] 窗口的新宽度.

        height(高度)       [可选参数] 窗口的新高度.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 窗口的句柄.

        失败: 返回 0 (如果窗体不存在.)

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Move
        """
        return autoit.win_move_by_handle(handle, x, y, width, height)

    def win_set_on_top(self, title, flag=1, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        设置指定窗口的"总是在顶层"属性.

        Win Set On Top ( "窗口标题", 标志 [, text="窗口文本"])

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)      目标窗口标题,可以是title/class..参考标题特殊定义.

        flag(标志)          用以决定目标窗口是否具有"顶层窗口"属性:

        1=设置为顶层窗口,0 = 取消顶层窗口属性

        text(窗口文本)       [可选参数] 目标窗口文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1.

        失败: 返回 0,窗口不存在.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        某些第三方程序带有"总是在顶层"的上下文菜单,AutoIt 更改其顶层窗口属性时其菜单项将不被更新.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Set State

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        win_set_on_top("[CLASS:Notepad]", 1)

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_set_on_top(title, flag, text=_text)

    def win_set_on_top_by_handle(self, handle, flag=1):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，设置指定窗口的"总是在顶层"属性.

        Win Set On Top By Handle ( "窗口句柄", 标志)

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)      目标窗口句柄..参考标题特殊定义.

        flag(标志)          用以决定目标窗口是否具有"顶层窗口"属性:

        1=设置为顶层窗口,0 = 取消顶层窗口属性

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1.

        失败: 返回 0,窗口不存在.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Set On Top
        """
        return autoit.win_set_on_top_by_handle(handle, flag)

    def win_set_state(self, title, flag=properties.SW_SHOW, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        显示,隐藏,最小化,最大化或还原一个窗口.

        Win Set State ( "窗口标题", 标志 [, text="窗口文本"])

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)       目标窗口标题,可以是title/class.参考标题特殊定义.

        flag(标志)           可执行程序的"显示"标志:

            @SW_HIDE = 隐藏窗口

            @SW_SHOW = 显示以前隐藏的窗口

            @SW_MINIMIZE = 最小化窗口

            @SW_MAXIMIZE = 最大化窗口

            @SW_RESTORE = 撤销窗口的最小化或最大化状态

            @SW_DISABLE = 禁用窗口

            @SW_ENABLE = 使窗口可用

        text(窗口文本)       [可选参数] 目标窗口文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1.

        失败: 返回 0,窗口不存在.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        若同时有多个窗口符合匹配条件则程序将以最近被激活的窗口为目标.

        @SW_MINIMIZE 和 @SW_MAXIMIZE 对模块化对话框/窗口照样有效.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Activate, Win Close, Control Hide, Win Flash, Win Kill, Win Minimize All, Win Minimize All Undo, Win Move, Win Set On Top

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        import time

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        win_set_state("[CLASS:Notepad]", 5)

        time.sleep(3)

        win_set_state("[CLASS:Notepad]", 5)

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_set_state(title, flag, text=_text)

    def win_set_state_by_handle(self, handle, flag=properties.SW_SHOW):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，显示,隐藏,最小化,最大化或还原一个窗口.

        Win Set State By Handle ( "窗口句柄", 标志 )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)       目标窗口句柄.参考标题特殊定义.

        flag(标志)           可执行程序的"显示"标志:

            @SW_HIDE = 隐藏窗口

            @SW_SHOW = 显示以前隐藏的窗口

            @SW_MINIMIZE = 最小化窗口

            @SW_MAXIMIZE = 最大化窗口

            @SW_RESTORE = 撤销窗口的最小化或最大化状态

            @SW_DISABLE = 禁用窗口

            @SW_ENABLE = 使窗口可用

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1.

        失败: 返回 0,窗口不存在.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Set State
        """
        return autoit.win_set_state_by_handle(handle, flag)

    def win_set_title(self, title, new_title, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        修改指定窗口的标题.

        Win Set Title ( "窗口标题", "新标题" [, text="窗口文本"])

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)             要修改的窗口标题,可以是title/class.参考标题特殊定义.

        new_title(新标题)          需要修改成的新标题.

        text(窗口文本)             [可选参数] 要修改的窗口包含的文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1.

        失败: 返回 0 ,窗口不存在.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        若同时有多个窗口符合匹配条件则程序将以最近被激活的窗口为目标.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        AutoItWinSetTitle, Win Get Title, Win Get Handle

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        win_set_title("[CLASS:Notepad]", "我新的记事本")

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_set_title(title, new_title, text=_text)

    def win_set_title_by_handle(self, handle, new_title):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，修改指定窗口的标题.

        Win Set Title By Handle ( "窗口句柄", "新标题" )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)             要修改的窗口句柄.参考标题特殊定义.

        new_title(新标题)          需要修改成的新标题.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1.

        失败: 返回 0 ,窗口不存在.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Set Title
        """
        return autoit.win_set_title_by_handle(handle, new_title)

    def win_set_trans(self, title, trans, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        设置指定窗口的透明度(仅支持Windows 2000/XP或更高版本)

        Win Set Trans ( "窗口标题", 透明度 [, text="窗口文本"])

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)         目标窗口标题,可以是title/class.参考 标题特殊定义.

        trans(透明度)          介于 0 到 255 之间的数值.数值越大则窗口越不透明. 255=不透明,0=不可见.

        text(窗口文本)         [可选参数] 目标窗口文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值非 0.

        失败: 返回值为 0, 若操作系统不支持本函数则 @error 将被设为1.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        仅支持 Windows 2000/XP 或更高版本,屏幕颜色必须高于或者等于16位.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        没有.

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        opt("WinTitleMatchMode", 2) # 匹配子字符串

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        win_set_trans("[CLASS:Notepad]", 170) # 让记事本半透明.

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_set_trans(title, trans, text=_text)

    def win_set_trans_by_handle(self, handle, trans):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，设置指定窗口的透明度(仅支持Windows 2000/XP或更高版本)

        Win Set Trans By Handle ( "窗口句柄", 透明度 )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)         目标窗口句柄.参考 标题特殊定义.

        trans(透明度)          介于 0 到 255 之间的数值.数值越大则窗口越不透明. 255=不透明,0=不可见.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值非 0.

        失败: 返回值为 0, 若操作系统不支持本函数则 @error 将被设为1.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Set Trans
        """
        return autoit.win_set_trans_by_handle(handle, trans)

    def win_wait(self, title, timeout="0", **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        暂停脚本的执行直至指定窗口存在(出现)为止.

        Win Wait ( "窗口标题" [, 超时时间 [, text="窗口文本"]] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)             目标窗口标题,可以是title/class. 参考 标题特殊定义.

        timeout(超时时间)           [可选参数] 超时时间,以秒为单位.

        text(窗口文本)              [可选参数] 目标窗口文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为 出现的窗口的句柄.

        失败: 返回值为 0,说明已超时.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        None.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Active, Win Exists, Win Wait Active, Win Wait Close, Win Wait Not Active, Process Wait

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        #等待记事本窗口出现

        win_wait("[CLASS:Notepad]")

        #等待记事本窗口出现,等待5秒,如果仍未出现.脚本继续

        win_wait("[CLASS:Notepad]", 5)

        -----------------------------------------------------------------------------------------------------------------
        """
        timeout = int(timeout)  # 因为RobotFramework会将参数转换为str
        _text = kwargs.get("text", "")

        return autoit.win_wait(title, timeout, text=_text)

    def win_wait_by_handle(self, handle, timeout):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，暂停脚本的执行直至指定窗口存在(出现)为止.

        Win Wait By Handle ( "窗口句柄" [, 超时时间] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)             目标窗口句柄. 参考 标题特殊定义.

        timeout(超时时间)           [可选参数] 超时时间,以秒为单位.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为 出现的窗口的句柄.

        失败: 返回值为 0,说明已超时.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Wait
        """
        return autoit.win_wait_by_handle(handle, timeout)

    def win_wait_active(self, title, timeout=0, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        暂停脚本的执行直至指定窗口被激活(成为活动状态)为止.

        Win Wait Active ( "窗口标题"[, 超时时间[, text="窗口文本"]] )

        [参数]

        title(窗口标题)             要检查的窗口标题,可以是title/class.参考 标题特殊定义.

        timeout(超时时间)           [可选参数] 超时时间,以秒为单位.

        text(窗口文本)              [可选参数] 要检查的窗口包含的文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为 窗口句柄.

        失败: 返回值为 0,说明已超时.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        None.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Active, Win Exists, Win Wait, Win Wait Close, Win Wait Not Active, Process Wait

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        #等待记事本窗口出现并是活动状态

        win_wait_active("[CLASS:Notepad]")

        #等待记事本窗口出现并是活动状态,最多等待5秒,5秒后不管如何，脚本继续

        win_wait_active("[CLASS:Notepad]", 5)

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_wait_active(title, timeout, text=_text)

    def win_wait_active_by_handle(self, handle, timeout):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，暂停脚本的执行直至指定窗口被激活(成为活动状态)为止.

        Win Wait Active By Handle ( "窗口句柄"[, 超时时间] )

        [参数]

        handle(窗口句柄)             要检查的窗口句柄.参考 标题特殊定义.

        timeout(超时时间)           [可选参数] 超时时间,以秒为单位.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为 窗口句柄.

        失败: 返回值为 0,说明已超时.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Wait Active
        """
        return autoit.win_wait_active_by_handle(handle, timeout)

    def win_wait_close(self, title, timeout=0, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        暂停脚本的执行直至所指定窗口不再存在为止.

        Win Wait Close ( "窗口标题" [, 超时时间 [, text="窗口文本" ]] )

        [参数]

        title(窗口标题)             目标窗口标题,可以是title/class.参考 标题的特殊定义.

        timeout(超时时间)           [可选参数] 超时时间,以秒为单位.

        text(窗口文本)              [可选参数] 目标窗口文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为1.

        失败: 返回值为0,说明已超时.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        若在调用本函数时目标窗口并不存在则立即返回1.脚本程序将每隔 250 毫秒 左右检查一次匹配窗口.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Active, Win Exists, Win Wait, Win Wait Active, Win Wait Not Active, Process Wait Close

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        #等待记事本窗口被关闭

        win_wait_close("[CLASS:Notepad]")

        #等待记事本窗口被关闭,最大等5秒,如果任然未关闭,脚本继续

        win_wait_close("[CLASS:Notepad]", 5)

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_wait_close(title, timeout, text=_text)

    def win_wait_close_by_handle(self, handle, timeout):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，暂停脚本的执行直至所指定窗口不再存在为止.

        Win Wait Close By Handle ( "窗口句柄" [, 超时时间 ] )

        [参数]

        handle(窗口句柄)             目标窗口句柄.参考 标题的特殊定义.

        timeout(超时时间)           [可选参数] 超时时间,以秒为单位.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回值为1.

        失败: 返回值为0,说明已超时.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Wait Close
        """
        return autoit.win_wait_close_by_handle(handle, timeout)

    def win_wait_not_active(self, title, timeout=0, **kwargs):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        暂停脚本的执行直至指定窗口不是激活状态为止.

        Win Wait Not Active ( "窗口标题"  [, 超时时间 [, text="窗口文本"]] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        title(窗口标题)           目标窗口标题,可以是title/class.参考 标题特殊定义

        timeout(超时时间)         [可选参数] 超时时间,以秒为单位.

        text(窗口文本)            [可选参数] 目标窗口文本.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1.

        失败: 返回 0,已经超时.

        -----------------------------------------------------------------------------------------------------------------

        [注意/说明]

        脚本程序将每隔 250 毫秒 左右检查一次匹配窗口.

        -----------------------------------------------------------------------------------------------------------------

        [相关]

        Win Active, Win Exists, Win Wait, Win Wait Active, Win Wait Close

        -----------------------------------------------------------------------------------------------------------------

        [示例/演示]

        # -*- coding: utf-8 -*-

        from AutoItV3Library import *

        run("notepad.exe")

        win_wait_active("[CLASS:Notepad]")

        #等待记事本窗口为不活动状态,如果一直是活动状态,脚本暂停

        win_wait_not_active("[CLASS:Notepad]")

        #等待记事本窗口为不活动状态(延迟5秒,5秒后不管如何,脚本继续)

        win_wait_not_active("[CLASS:Notepad]", 5)

        -----------------------------------------------------------------------------------------------------------------
        """
        _text = kwargs.get("text", "")

        return autoit.win_wait_not_active(title, timeout, text=_text)

    def win_wait_not_active_by_handle(self, handle, timeout):
        """
        -----------------------------------------------------------------------------------------------------------------

        [描述]

        根据句柄，暂停脚本的执行直至指定窗口不是激活状态为止.

        Win Wait Not Active By Handle ( "窗口句柄"  [, 超时时间] )

        -----------------------------------------------------------------------------------------------------------------

        [参数]

        handle(窗口句柄)           目标窗口句柄.参考 标题特殊定义

        timeout(超时时间)         [可选参数] 超时时间,以秒为单位.

        -----------------------------------------------------------------------------------------------------------------

        [返回值]

        成功: 返回 1.

        失败: 返回 0,已经超时.

        ----------------------------------------------------------------------------------------------------------------

        [相关]

        用法参考Win Wait Not Active
        """
        return autoit.win_wait_not_active_by_handle(handle, timeout)


if __name__=='__main__':
    print("本模块只是引用PyAutoIt模块，将它封装成中文版的接口，方便不熟悉英文的用户使用。\n\
    PyAutoIt模块依赖pywin32，因此安装本模块的顺序是：\n\
    1.安装pywin32；\n\
    2.安装PyAutoIt;\n\
    3.安装AutoItV3Library(将AutoItV3Library.py文件拷贝到Python\Lib\site-packages目录里)。")
